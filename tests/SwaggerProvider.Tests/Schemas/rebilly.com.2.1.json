{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "api.rebilly.com",
  "basePath": "/v2.1",
  "info": {
    "contact": {
      "email": "integrations@rebilly.com",
      "name": "Rebilly API Support",
      "url": "https://www.rebilly.com/contact/"
    },
    "description": "# Introduction\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [C#](https://github.com/Rebilly/rebilly-dotnet-client)).\n\n# Authentication\nWhen you sign up for an account, you are given your first API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  private key, JSON Web Tokens, and\npublic key.\n- private key: authenticates each request by searching for the presence\nof an HTTP header: REB-APIKEY.\n- JWT: authenticates each request by the HTTP header: Authorization.\n- public key: authenticates by the HTTP header: REB-AUTH (read more on this below).\n\nRebilly also offers JSON Web Tokens (JWT) authentication, where you can control\nthe specific granular permissions and expiration for that JWT.  We call our resource\nfor generating JWT [Sessions](#tag/Sessions).\n\nRebilly also has a client-side authentication scheme that uses an\napiUser and HMAC-SHA1 signature (only for the Tokens resource), so\nthat you may safely create tokens from the client-side without compromising\nyour secret keys.\n\nNever share your secret keys. Keep them guarded and secure.\nThe client-side authentication scheme uses one HTTP header named REB-AUTH.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# PHP SDK\nFor all PHP SDK examples provided in this spec you will need to configure `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n",
    "license": {
      "name": "Rebilly",
      "url": "https://my.rebilly.com/api/license/"
    },
    "termsOfService": "https://www.rebilly.com/terms/",
    "title": "Rebilly",
    "version": "2.1",
    "x-apisguru-categories": [
      "payment",
      "ecommerce"
    ],
    "x-logo": {
      "backgroundColor": "#0033A0",
      "url": "https://api.apis.guru/v2/cache/logo/https_rebilly.github.io_RebillyAPI_rb_apiLogo.svg"
    },
    "x-origin": {
      "format": "swagger",
      "url": "http://rebilly.github.io/RebillyAPI/swagger.json",
      "version": "2.0"
    },
    "x-preferred": true,
    "x-providerName": "rebilly.com"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "ApiKey": {
      "description": "When you sign up for an account, you are given your first API key.\nTo do so please follow this link: https://www.rebilly.com/site/signup/\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future).\n",
      "in": "header",
      "name": "REB-APIKEY",
      "type": "apiKey"
    },
    "JWT": {
      "description": "You can create a JSON Web Token (JWT) via our Sessions resource.\n",
      "type": "basic"
    },
    "RebAuth": {
      "description": "Only for the Tokens resource.\nThe REB-AUTH value is created in this way\nGenerate a Nonce (random string), and a Timestamp (unix timestamp)\nConcatenate the values of ApiUser, Nonce, and Timestamp (in that order).\nUse that value as the input data when you calculate the <a href=\"http://tools.ietf.org/html/rfc2104\">HMAC-SHA1</a> with your secret key, called the signature.\nForming the four data points into a JSON object.\n\n```json\n{\n  \"REB-APIUSER\": \"abcdefg\",\n  \"REB-NONCE\": \"adfsjtreitou345fgkdafgj\",\n  \"REB-TIMESTAMP\": \"1382591345\",\n  \"REB-SIGNATURE\": \"a234fc95460401cfg09c9d09\"\n}\n```\n\nThen base64 encode that JSON object. This is the final value of the REB-AUTH HTTP header\n",
      "in": "header",
      "name": "REB-AUTH",
      "type": "apiKey"
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "parameters": {
    "collectionCriteria": {
      "description": "The json criteria for collection",
      "in": "query",
      "name": "criteria",
      "type": "string"
    },
    "collectionExpand": {
      "description": "Expand response to get full related object intead of ID.  See the expand guide for more info.",
      "in": "query",
      "name": "expand",
      "type": "string"
    },
    "collectionFields": {
      "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.",
      "in": "query",
      "name": "fields",
      "type": "string"
    },
    "collectionFilter": {
      "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n",
      "in": "query",
      "name": "filter",
      "type": "string"
    },
    "collectionLimit": {
      "description": "The collection items limit",
      "in": "query",
      "maximum": 1000,
      "minimum": 0,
      "name": "limit",
      "type": "integer"
    },
    "collectionOffset": {
      "description": "The collection items offset",
      "in": "query",
      "minimum": 0,
      "name": "offset",
      "type": "integer"
    },
    "collectionQuery": {
      "description": "The partial search of the text fields.",
      "in": "query",
      "name": "q",
      "type": "string"
    },
    "collectionSort": {
      "collectionFormat": "csv",
      "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
      "in": "query",
      "items": {
        "type": "string"
      },
      "name": "sort",
      "type": "array"
    },
    "hash": {
      "description": "The token identifier string",
      "in": "path",
      "name": "hash",
      "required": true,
      "type": "string"
    },
    "mediaType": {
      "default": "application/json",
      "description": "The response media type",
      "enum": [
        "application/json"
      ],
      "in": "header",
      "name": "Accept",
      "type": "string"
    },
    "resourceId": {
      "description": "The resource identifier string",
      "in": "path",
      "name": "id",
      "required": true,
      "type": "string"
    },
    "rulesVersion": {
      "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.",
      "in": "path",
      "minimum": 1,
      "name": "version",
      "required": true,
      "type": "integer"
    },
    "systemEventType": {
      "description": "The event type",
      "in": "path",
      "name": "eventType",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "AccessForbidden": {
      "description": "Access forbidden, invalid API-KEY was used",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidDataError": {
      "description": "Invalid data was sent",
      "schema": {
        "$ref": "#/definitions/InvalidError"
      }
    },
    "NotFound": {
      "description": "Resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "tags": [
    {
      "description": "3D Secure is a way to authenticate and protect transactions.  Typically,\nit's only possible to protect the initial transaction in a subscription\nwith 3D Secure.\n",
      "name": "3D Secure"
    },
    {
      "description": "Always keep your API Keys private.  In addition to your API Keys, you may use\nJSON Web Tokens (JWT) to authenticate to the API.  See\nour [Sessions](#tag/Sessions) resource for more information.\n",
      "name": "API Keys"
    },
    {
      "description": "Bank Accounts are a type of payment instrument used to collect\nACH (echeck) payments, similar to how a payment\ncard would be used to for a credit card payment.\n",
      "name": "Bank Accounts"
    },
    {
      "description": "Your blacklists contains values of customerIds, email addresses,\nipAddresses, bank identification numbers, countries or payment cards that\nyou do NOT want to do business with. They are a good tool for managing\nrisk. A blacklist entry that expires after a period of time we call a\ngreylist.\n",
      "name": "Blacklists"
    },
    {
      "description": "Hosted checkout pages.\n",
      "name": "Checkout Pages"
    },
    {
      "description": "Contacts belong to Customers. A Customer can have many contacts.\nSome contacts are associated to Invoices, Payment Cards, Subscriptions\nand Transactions.\n",
      "name": "Contacts"
    },
    {
      "description": "Coupons allows to apply different types of discounts to Invoices, Subscriptions and Plans.\n",
      "name": "Coupons"
    },
    {
      "description": "Customers are your customers, sometimes known as accounts, clients,\nmembers, patrons, or players in other systems.\n",
      "name": "Customers"
    },
    {
      "description": "Create authentication credentials, login, logout, and verify your customers.\n",
      "name": "Customer Authentication"
    },
    {
      "description": "If system events can't solve your problems, you are able to create a custom event\nthat can fit your requirements, and use it to solve your own business logic.\n",
      "name": "Custom Events"
    },
    {
      "description": "\"Don't conform to the rules. Create the rules.\"\nRather than adapt your workflow and business, Rebilly can align with your business\nobjectives by giving you the power to automate certain behaviors when key events happen.\nYou can use this to your advantage to mitigate risk, maximize conversions and minimize costs.\nYou have the controls at your fingertips here. If you need more control,\nor help dialing in on a strategy, feel free to contact us.\n\nWhen an event happens, it triggers the evaluation of conditions (that you set up),\nin order from top to bottom. If the condition is met, the corresponding actions are executed.\nThe conditions continue to be checked until either all of the conditions have been executed,\nor a special \"stop\" action is executed.\n",
      "name": "Custom Rules"
    },
    {
      "description": "Create additional custom fields for particular resources.  You may name,\ndescribe, and determine the type of the schema.\n",
      "name": "Custom Fields"
    },
    {
      "description": "Get and create SMTP and Webhook credential hashes.\n",
      "name": "Credential Hashes"
    },
    {
      "description": "Handle disputes (chargebacks and retrievals).\n",
      "name": "Disputes"
    },
    {
      "description": "Send automated emails through our system by connecting to your third party\nSMTP server (or your third party email service provider's SMTP server).\n",
      "name": "Email Credentials"
    },
    {
      "description": "A File is an entity that can store a phyiscal file and some metadata. It also provides an easy access to\nits size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored\nfiles.\nThere are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending\nfile contents as POST body), fetching from URL (by providing the file URL via 'url' param)\nAttachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,\nTransaction, Subscription, Plan, Product, Invoice, Note. That allows to quickly find and use files related to\nthose specific entities.\n",
      "name": "Files"
    },
    {
      "description": "Gateway accounts connect payment request to third party networks and platforms.\n",
      "name": "Gateway Accounts"
    },
    {
      "description": "Invoices leave a record for both you and your customer of the products sold.\n",
      "name": "Invoices"
    },
    {
      "description": "Layouts are used to hold collections of plans. A layout can be used to\npower a pricing page. You can make multiple layouts, and use rules to\ntarget them to different audiences.\n",
      "name": "Layouts"
    },
    {
      "description": "Lists contain sets of values and may be referenced within Rules criteria.\n\nYou may grant permissions to edit Lists to different people than those who can edit Rules.\nIt may be useful if your workflow involves frequent updates to value sets used in criteria.\n",
      "name": "Lists"
    },
    {
      "description": "Migrate payment cards from one gateway to another.\n",
      "name": "Migrate payment cards"
    },
    {
      "description": "Leave notes on a customer record to have a handy location to share with\nothers who may interface with the customer.  It's great for customer service.\n",
      "name": "Notes"
    },
    {
      "description": "Organizations include the name and address of the entities related to your\naccount. An account may be multi-national, and support multiple\norganizations. Note: Organizations are share between \"Live\" and \"Sandbox\"\n",
      "name": "Organizations"
    },
    {
      "description": "Collect money from your customers with payments.  You can schedule a payment\nto occur in the future.  You can assign a dunning schedule to a payment to collect\nin the case of a decline.\n\nSome payments may be, what we term, suspended payments.  These types of payments\nrequire user interaction.  For example, an initial PayPal purchase, a 3D Secure\npurchase, China Union Pay, and more require the customer's interaction to\ncomplete the payment.  We call these a \"suspended\" payment flow.\n",
      "name": "Payments"
    },
    {
      "description": "Payment cards are a type of payment instrument used for credit and debit card\nsales.  Rebilly securely vaults the full payment card number, and can pass it\nonward securely to any gateway account to transact business.\n",
      "name": "Payment Cards"
    },
    {
      "description": "Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment\ntoken can be made using a different authentication scheme (refer to the public key\nauthentication scheme in the Authentication section), which allows you to\ncreate a payment tokeng directly from the browser, bypassing the need to send\nsensitive cardholder info to your servers.  We recommend using this with our\nRebilly.js library, which helps you wire a form into this API resource and create\npayment tokens.\n",
      "name": "Payment Tokens"
    },
    {
      "description": "Plans are a template for making a subscription.  For example, you may have a plan\nthat has a 30-day free trial followed by a recurring charge of $19.95 per month\nuntil canceled.  The combination of the plan and a request to make a subscription\nwill apply those instructions to create the invoices according to the plan's\nschedule.\n",
      "name": "Plans"
    },
    {
      "description": "Proposed:  Your product includes digital goods, services, and physical goods.\n",
      "name": "Products"
    },
    {
      "description": "The Rebilly Reporting API is currently experimental.  You may see\nthe [Reports API Documentation here](https://rebilly.github.io/RebillyReportsAPI/).\n",
      "name": "Reports"
    },
    {
      "description": "\"Don't conform to the rules. Create the rules.\"\nRather than adapt your workflow and business, Rebilly can align with your business\nobjectives by giving you the power to automate certain behaviors when key events happen.\nYou can use this to your advantage to mitigate risk, maximize conversions and minimize costs.\nYou have the controls at your fingertips here. If you need more control,\nor help dialing in on a strategy, feel free to contact us.\n\nWhen an event happens, it triggers the evaluation of conditions (that you set up),\nin order from top to bottom. If the condition is met, the corresponding actions are executed.\nThe conditions continue to be checked until either all of the conditions have been executed,\nor a special \"stop\" action is executed.\n",
      "name": "Rules"
    },
    {
      "description": "A session contains a token, which is a JSON Web Token.  The token is created\nwith a user's signin credentials.\n\nThis token can be used to authenticate to the API.  In addition, the session can be set to\nexpire at a particular time, and has very granular control over permissions.\nUse the token to then authenticate for further requests to the Rebilly API.\n\nThe token should be kept private, but could be stored on the user's browser\nclient to simulate a \"session.\"\n",
      "name": "Sessions"
    },
    {
      "description": "A shipping zone contains regions and countries that you ship to. Each shipping zone has its own shipping rates.\n",
      "name": "Shipping Zones"
    },
    {
      "description": "Check the status of the Rebilly API (no authentication required).\n",
      "name": "Status"
    },
    {
      "description": "A subscription applies a plan's template to create invoices for a customer at the\nappropriate scheduled intervals.  A subscription may also determine if the payment\nis collected automatically (with autopay set true).\n",
      "name": "Subscriptions"
    },
    {
      "description": "Proposed: You can map a product to a tax category.  The tax category is used by\ntax providers to calculate taxes for invoices.\n",
      "name": "Taxes"
    },
    {
      "description": "Tracking is a layer for accessing all the activity (API requests,\nsubscriptions, webhooks, events, etc.), thus providing easier\ndebugging and issues auditing.\n",
      "name": "Tracking"
    },
    {
      "description": "Get and refund transactions.\n",
      "name": "Transactions"
    },
    {
      "description": "A User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.\n",
      "name": "Users"
    },
    {
      "description": "A Website represents the website/brand that customers interact with... You\ncould think of it like a brand.  For example, Nestle owns Perrier and Purina\nand PowerBar.\n\nWe recognize that some enterprises have more than one website (or brand).  The\nwebsite is related to each invoice and each payment gateway account.  This feature\nwould allow you to have gateway accounts that are related to multiple websites, or\nexclusive to particular websites.  And gives you more control over your business.\n",
      "name": "Websites"
    },
    {
      "description": "Webhooks are designed to notify your systems when certain/all registered events happen in near real-time.\nThey allow you to collect information about those events. Rebilly can send these information via\nPOST to an URL of your choice.\n",
      "name": "Webhooks"
    }
  ],
  "paths": {
    "/3dsecure": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ThreeDSecure"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of ThreeDSecure entries",
        "tags": [
          "3D Secure"
        ]
      },
      "post": {
        "description": "Create a ThreeDSecure entry\n",
        "parameters": [
          {
            "description": "ThreeDSecure resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ThreeDSecure entry was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a ThreeDSecure entry",
        "tags": [
          "3D Secure"
        ]
      }
    },
    "/3dsecure/{id}": {
      "get": {
        "description": "Retrieve a ThreeDSecure entry with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ThreeDSecure entry was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a ThreeDSecure entry",
        "tags": [
          "3D Secure"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/activation/{token}": {
      "parameters": [
        {
          "description": "The token string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Sends a token to activate user account\n",
        "responses": {
          "204": {
            "description": "User account was activated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Invalid token was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [
          {
            "RebAuth": []
          }
        ],
        "summary": "Sends a token to activate user account",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->users()->activate('token');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/api-keys": {
      "get": {
        "description": "Retrieve a list of api keys\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api keys was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ApiKey"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of api keys",
        "tags": [
          "API Keys"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeys = $client->apiKeys()->search([\n    'filter' => 'description:Test',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create an api key\n",
        "parameters": [
          {
            "description": "ApiKey resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Api Key was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create an api key",
        "tags": [
          "API Keys"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeyForm = new Rebilly\\Entities\\ApiKey();\n$apiKeyForm->setDescription('Test');\n$apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);\n\ntry {\n    $apiKey = $client->apiKeys()->create($apiKeyForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/api-keys/{id}": {
      "delete": {
        "description": "Delete api key with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ApiKey was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict",
            "description": "ApiKey has related resources and cannot be deleted"
          }
        },
        "summary": "Delete api key",
        "tags": [
          "API Keys"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->apiKeys()->delete('apiKeyID');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve api key with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Api key was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve api key",
        "tags": [
          "API Keys"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeys = $client->apiKeys()->load('apiKeyID');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update api key with predefined identifier string\n",
        "parameters": [
          {
            "description": "ApiKey resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKey was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "201": {
            "description": "ApiKey was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError",
            "description": "Invalid data was sent"
          }
        },
        "summary": "Create or update api key with predefined ID",
        "tags": [
          "API Keys"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiKeyForm = new Rebilly\\Entities\\ApiKey();\n$apiKeyForm->setDescription('TestPut');\n$apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);\n\ntry {\n    $apiKey = $client->apiKeys()->update('apiKeyID', $apiKeyForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/attachments": {
      "get": {
        "description": "Retrieve a list of Attachments\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "relatedId",
                "-relatedId",
                "relatedType",
                "-relatedType",
                "fileId",
                "-fileId",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Attachments was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Attachment"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of Attachments",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachments = $client->attachments()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create an Attachment\n",
        "parameters": [
          {
            "description": "Attachment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create an Attachment",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->create($attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/attachments/{id}": {
      "delete": {
        "description": "Delete the Attachment with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Attachment was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete an Attachment",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->attachments()->delete('attachmentId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Attachment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Attachment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve an Attachment",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachment = $client->attachments()->load('attachmentId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Update the Attachment with predefined ID\n",
        "parameters": [
          {
            "description": "Attachment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Update the Attachment with predefined ID",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->update('attachmentId', $attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-options": {
      "get": {
        "description": "Read current authentication options\n",
        "responses": {
          "200": {
            "description": "Current authentication options was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthenticationOptions"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Read current authentication options",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptions = $client->authenticationOptions()->load();\n"
          }
        ]
      },
      "put": {
        "description": "Change options\n",
        "parameters": [
          {
            "description": "Authentication Options resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication Options were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Change authentication options",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptionsForm = new Rebilly\\Entities\\AuthenticationOptions();\n// Regular expression below matches any password with 6+ length that contains alphabet symbols and/or numbers.\n$authenticationOptionsForm->setPasswordPattern('/^[a-zA-Z0-9]{6,}$/');\n\ntry {\n    $authenticationOptions = $client->authenticationOptions()->update($authenticationOptionsForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens": {
      "get": {
        "description": "Retrieve a list of auth tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of auth tokens was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/AuthenticationToken"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of auth tokens",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationTokens = $client->authenticationTokens()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Login a user (customer)\n",
        "parameters": [
          {
            "description": "AuthenticationToken resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Login successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Login",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationForm = new Rebilly\\Entities\\AuthenticationToken();\n$authenticationForm->setUsername('username');\n$authenticationForm->setPassword('test123');\n\ntry {\n    $authenticationToken = $client->authenticationTokens()->login($authenticationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens/{token}": {
      "delete": {
        "description": "Logout a user\n",
        "responses": {
          "204": {
            "description": "User was logged out",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Logout a user",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->authenticationTokens()->logout('token');\n"
          }
        ]
      },
      "get": {
        "description": "Verify an authentication token\n",
        "responses": {
          "200": {
            "description": "Authentication Token was verified",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Verify",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$isVerified = $client->authenticationTokens()->verify('token');\n"
          }
        ]
      },
      "parameters": [
        {
          "description": "The token identifier string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/bank-accounts": {
      "get": {
        "description": "Retrieve a list of Bank Accounts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Bank Accounts was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/BankAccount"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of bank accounts",
        "tags": [
          "Bank Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccounts = $client->bankAccounts()->search([\n    'filter' => 'customerId:testId',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a Bank Account\n",
        "parameters": [
          {
            "description": "BankAccount resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Bank Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Bank Account",
        "tags": [
          "Bank Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setContactId('contactId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n\ntry {\n    $bankAccount = $client->bankAccounts()->create($bankAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}": {
      "get": {
        "description": "Retrieve a Bank Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "BankAccount was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Bank Account",
        "tags": [
          "Bank Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->load('bankAccountId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a BankAccount with predefined identifier string\n",
        "parameters": [
          {
            "description": "BankAccount resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BankAccount was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "201": {
            "description": "BankAccount was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a BankAccount with predefined ID",
        "tags": [
          "Bank Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setContactId('contactId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n\ntry {\n    $bankAccount = $client->customers()->update('bankAccountId', $bankAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Deactivate a Bank Account\n",
        "responses": {
          "201": {
            "description": "Deactivated successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Deactivate a Bank Account",
        "tags": [
          "Bank Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->deactivate('bankAccountId');\n"
          }
        ]
      }
    },
    "/blacklists": {
      "get": {
        "description": "Retrieve a list of blacklists\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Blacklists was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Blacklist"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of blacklists",
        "tags": [
          "Blacklists"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklists = $client->blacklists()->search([\n    'filter' => 'value:testValue',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a blacklist\n",
        "parameters": [
          {
            "description": "Blacklist resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a blacklist",
        "tags": [
          "Blacklists"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->create($blacklistForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/blacklists/{id}": {
      "delete": {
        "description": "Delete a blacklist with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Blacklist was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a blacklist",
        "tags": [
          "Blacklists"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->blacklists()->delete('blacklistId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a blacklist with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Blacklist was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a blacklist",
        "tags": [
          "Blacklists"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklist = $client->blacklists()->load('blacklistId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a blacklist with predefined identifier string\n",
        "parameters": [
          {
            "description": "Blacklist resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Blacklist exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a blacklist with predefined ID",
        "tags": [
          "Blacklists"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->update('blacklistId', $blacklistForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/checkout-pages": {
      "get": {
        "description": "Retrieve a list of checkout pages\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of checkout pages was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CheckoutPage"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of checkout pages",
        "tags": [
          "Checkout Pages"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPages = $client->checkoutPages()->search([\n    'filter' => 'name:testCheckoutPage',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a Checkout Page\n",
        "parameters": [
          {
            "description": "Checkout Page resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Checkout Page",
        "tags": [
          "Checkout Pages"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPageForm = new Rebilly\\Entities\\CheckoutPage();\n$checkoutPageForm->setPlanId('planId');\n$checkoutPageForm->setWebsiteId('websiteId');\n$checkoutPageForm->setName('TestCheckoutPage');\n$checkoutPageForm->setUriPath('test-checkout-page');\n\ntry {\n    $checkoutPage = $client->checkoutPages()->create($checkoutPageForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/checkout-pages/{id}": {
      "delete": {
        "description": "Delete a Checkout Page with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Checkout Page was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Checkout page cannot be deleted"
          }
        },
        "summary": "Delete a Checkout Page",
        "tags": [
          "Checkout Pages"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->checkoutPages()->delete('checkoutPageId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Checkout Page with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Checkout Page was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Checkout Page",
        "tags": [
          "Checkout Pages"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPage = $client->checkoutPages()->load('checkoutPageId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a Checkout Page with predefined identifier string\n",
        "parameters": [
          {
            "description": "Checkout Page resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout Page was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a Checkout Page with predefined ID",
        "tags": [
          "Checkout Pages"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$checkoutPageForm = new Rebilly\\Entities\\CheckoutPage();\n$checkoutPageForm->setPlanId('planId');\n$checkoutPageForm->setWebsiteId('websiteId');\n$checkoutPageForm->setName('TestCheckoutPage');\n$checkoutPageForm->setUriPath('test-checkout-page');\n\ntry {\n    $checkoutPage = $client->checkoutPages()->update('checkoutPageId', $checkoutPageForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/contacts": {
      "get": {
        "description": "Retrieve a list of contacts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Contacts was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Contact"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of contacts",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contacts = $client->contacts()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a contact\n",
        "parameters": [
          {
            "description": "Contact resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a contact",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n\ntry {\n    $contact = $client->contacts()->create($contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/contacts/{id}": {
      "get": {
        "description": "Retrieve a contact with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Contact was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a contact",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contact = $client->contacts()->load('contactId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a contact with predefined identifier string\n",
        "parameters": [
          {
            "description": "Contact resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Contact exists and cannot be updated"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create or update a contact with predefined ID",
        "tags": [
          "Contacts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n\ntry {\n    $contact = $client->contacts()->update('contactId', $contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons": {
      "get": {
        "description": "Retrieve a list of coupons\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionCriteria"
          },
          {
            "$ref": "#/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of coupons was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Coupon"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of coupons",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupons = $client->coupons()->search([\n    'filter' => 'status:issued',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a coupon\n",
        "parameters": [
          {
            "description": "Coupon resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a coupon",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Discount::TYPE_FIXED,\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new Rebilly\\Entities\\Coupons\\Discount($discountArray);\n$couponForm->setDiscount($discountForm);\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$couponForm->setRestrictions($restrictionForm);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons-redemptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionCriteria"
          },
          {
            "$ref": "#/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupons redemptions were retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CouponRedemption"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of coupon redemptions",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemptions = $client->couponsRedemptions()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Redeem a coupon\n",
        "parameters": [
          {
            "description": "Redeem a coupon",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon was redeemed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Redeem a coupon",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$redemptionForm = new Rebilly\\Entities\\Coupons\\Redemption();\n$redemptionForm->setCustomerId('customerId');\n$redemptionForm->setRedemptionCode('redemptionCode');\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$redemptionForm->setAdditionalRestrictions($restrictionForm);\n\ntry {\n    $couponRedemption = $client->couponsRedemptions()->redeem($redemptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons-redemptions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Retrieve a coupon redemption with specified identifier string",
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a coupon redemption with specified identifier string",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemption = $client->couponsRedemptions()->load('redemptionCode');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/coupons-redemptions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "responses": {
          "201": {
            "description": "Cancel a coupon redemption"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Cancel a coupon redemption",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->couponsRedemptions()->cancel('id');\n"
          }
        ]
      }
    },
    "/coupons/{redemptionCode}": {
      "get": {
        "description": "Retrieve a coupon with specified redemption code string\n",
        "responses": {
          "200": {
            "description": "Coupon was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a coupon",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupon = $client->coupons()->load('redemptionCode');\n"
          }
        ]
      },
      "parameters": [
        {
          "description": "The Coupon's redemption code",
          "in": "path",
          "name": "redemptionCode",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "description": "Create or update a coupon with predefined redemption code\n",
        "parameters": [
          {
            "description": "Coupon resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Coupon was redeemed already and cannot be changed"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a coupon with predefined redemption code",
        "tags": [
          "Coupons"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Discount::TYPE_FIXED,\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new Rebilly\\Entities\\Coupons\\Discount($discountArray);\n$couponForm->setDiscount($discountForm);\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$couponForm->setRestrictions($restrictionForm);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm, 'redemptionCode');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/credential-hashes/emails": {
      "post": {
        "description": "Create an email credential\n",
        "parameters": [
          {
            "description": "Email credential resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmtpCredential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Email credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SmtpCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create an email credential",
        "tags": [
          "Credential Hashes"
        ]
      }
    },
    "/credential-hashes/emails/{hash}": {
      "get": {
        "description": "Retrieve an email credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Email credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SmtpCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve an email credential",
        "tags": [
          "Credential Hashes"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/hash"
        }
      ]
    },
    "/credential-hashes/webhooks": {
      "post": {
        "description": "Create a webhook credential\n",
        "parameters": [
          {
            "description": "Credential resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookCredential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Webhook credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/WebhookCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a webhook credential",
        "tags": [
          "Credential Hashes"
        ]
      }
    },
    "/credential-hashes/webhooks/{hash}": {
      "get": {
        "description": "Retrieve a webhook credential with specified token identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/WebhookCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a webhook credential",
        "tags": [
          "Credential Hashes"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/hash"
        }
      ]
    },
    "/credentials": {
      "get": {
        "description": "Retrieve a list of credentials\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Credentials was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Credential"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of credentials",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentials = $client->customerCredentials()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a credential\n",
        "parameters": [
          {
            "description": "Credential resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a credential",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->create($customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/credentials/{id}": {
      "delete": {
        "description": "Delete a credential with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Credential was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a credential",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->customerCredentials()->delete('credentialId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a credential with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a credential",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredential = $client->customerCredentials()->load('credentialId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a credential with predefined identifier string\n",
        "parameters": [
          {
            "description": "Credential resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credential was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a credential with predefined ID",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->update('credentialId', $customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/custom-events": {
      "get": {
        "description": "Retrieve a list of custom events\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of custom events was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomEvent"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of custom events",
        "tags": [
          "Custom Events"
        ]
      },
      "post": {
        "description": "Create a custom event\n",
        "parameters": [
          {
            "description": "Custom event resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a custom event",
        "tags": [
          "Custom Events"
        ]
      }
    },
    "/custom-events/{id}": {
      "delete": {
        "description": "Delete a custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Custom event was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict",
            "description": "Custom event has related rules and cannot be deleted"
          }
        },
        "summary": "Delete a custom event",
        "tags": [
          "Custom Events"
        ]
      },
      "get": {
        "description": "Retrieve a custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a custom event",
        "tags": [
          "Custom Events"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a custom event with predefined identifier string\n",
        "parameters": [
          {
            "description": "Custom event resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict",
            "description": "Custom event can't be modified"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create or update a custom event with predefined ID",
        "tags": [
          "Custom Events"
        ]
      }
    },
    "/custom-events/{id}/rules": {
      "get": {
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a list of rules for custom event",
        "tags": [
          "Custom Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "parameters": [
          {
            "description": "Set of rules resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rules were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Update the rules for custom event",
        "tags": [
          "Custom Events",
          "Rules"
        ]
      }
    },
    "/custom-events/{id}/rules/history": {
      "get": {
        "description": "Retrieve the change history of the set of rules for the selected custom event.\nThe history is updated each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleSetHistoryItem"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve the change history of the set of rules for a custom event",
        "tags": [
          "Custom Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/custom-events/{id}/rules/history/{version}": {
      "get": {
        "description": "Retrieve the record from the change history of the set of rules for the selected custom event.\nA history record is created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetHistoryItem"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve the record from the change history of the set of rules for a custom event",
        "tags": [
          "Custom Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ]
    },
    "/custom-events/{id}/rules/versions/{version}": {
      "get": {
        "description": "Retrieve the version of the selected set of rules for the selected custom event.\nThe versions are created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve the version of the set of rules for a custom event",
        "tags": [
          "Custom Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ]
    },
    "/custom-fields/{resource}": {
      "get": {
        "description": "Retrieve a schema of Custom Fields for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of Custom Fields was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "description": "The list of custom fields",
              "items": {
                "$ref": "#/definitions/CustomField"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve Custom Fields",
        "tags": [
          "Custom Fields"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFields = $client->customFields()->search([\n    'filter' => 'type:boolean',\n]);\n"
          }
        ]
      },
      "parameters": [
        {
          "description": "The resource type string",
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "payments",
            "websites",
            "contacts",
            "products"
          ],
          "in": "path",
          "name": "resource",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/custom-fields/{resource}/{name}": {
      "delete": {
        "description": "Delete a custom field by its name\n",
        "responses": {
          "204": {
            "description": "Custom field has been deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "The field is in use: remove all the associated data first",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "summary": "Delete a custom field",
        "tags": [
          "Custom Fields"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->customFields()->delete('customers', 'testFieldName');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a schema of the given Custom Field for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of the Custom Field was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Custom Field",
        "tags": [
          "Custom Fields"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customField = $client->customFields()->load('customers', 'customerId');\n"
          }
        ]
      },
      "parameters": [
        {
          "description": "The resource type string",
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "payments",
            "websites",
            "contacts",
            "products"
          ],
          "in": "path",
          "name": "resource",
          "required": true,
          "type": "string"
        },
        {
          "description": "The custom field's identifier string",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "description": "Create or alter a schema of the given Custom Field for the given resource type.\n",
        "parameters": [
          {
            "description": "Custom Fields schema of the given resource type",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Custom Field was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "201": {
            "description": "The Custom Fields was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "The schema is in use: remove all the associated data in order to remove or alter the schema",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or alter a Custom Field",
        "tags": [
          "Custom Fields"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFieldForm = new Rebilly\\Entities\\CustomField();\n$customFieldForm->setType($customFieldForm::TYPE_BOOLEAN);\n\ntry {\n    $customField = $client->customFields()->update('customers', 'testFieldName', $customFieldForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers": {
      "get": {
        "description": "Retrieve a list of customers\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "email",
                "-email",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of Customers was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of customers",
        "tags": [
          "Customers"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a customer\n",
        "parameters": [
          {
            "description": "Customer resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a customer",
        "tags": [
          "Customers"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setFirstName('Sherlock');\n$customerForm->setLastName('Holmes');\n$customerForm->setEmail('sherlock.holmes@gmail.com');\n\ntry {\n    $customer = $client->customers()->create($customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}": {
      "get": {
        "description": "Retrieve a customer with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Customer was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a customer",
        "tags": [
          "Customers"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->load('myCustomerId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a customer with predefined identifier string\n",
        "parameters": [
          {
            "description": "Customer resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "201": {
            "description": "Customer was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a customer with predefined ID",
        "tags": [
          "Customers"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setFirstName('Sherlock');\n$customerForm->setLastName('Holmes');\n$customerForm->setEmail('sherlock.holmes@gmail.com');\n\ntry {\n    $customer = $client->customers()->update('myCustomerId', $customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}/lead-source": {
      "delete": {
        "description": "Delete a Lead Source that belongs to a certain customer\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "summary": "Delete a Lead Source for a customer",
        "tags": [
          "Customers"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->deleteLeadSource('myCustomerId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Lead Source of given customer\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a customer's Lead Source",
        "tags": [
          "Customers"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->load('myCustomerId');\n$leadSource = $customer->getLeadSource();\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a Lead Source for a customer\n",
        "parameters": [
          {
            "description": "Lead Source resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Lead Source for a customer",
        "tags": [
          "Customers"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $customer = $client->customers()->updateLeadSource('myCustomerId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes": {
      "get": {
        "description": "Retrieve a list of disputes\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of disputes was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Dispute"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of disputes",
        "tags": [
          "Disputes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputes = $client->disputes()->search([\n    'filter' => 'transactionId:testId',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a dispute\n",
        "parameters": [
          {
            "description": "Dispute resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a dispute",
        "tags": [
          "Disputes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->create($disputeForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes/{id}": {
      "get": {
        "description": "Retrieve a dispute with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Dispute was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a dispute",
        "tags": [
          "Disputes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$dispute = $client->disputes()->load('disputeId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a Dispute with predefined identifier string\n",
        "parameters": [
          {
            "description": "Dispute resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a Dispute with predefined ID",
        "tags": [
          "Disputes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->update('disputeId', $dispute);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/events": {
      "get": {
        "responses": {
          "200": {
            "description": "A list of System Events was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/SystemEvent"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of existing events",
        "tags": [
          "Events",
          "Rules"
        ]
      }
    },
    "/events/{eventType}": {
      "get": {
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SystemEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve the event information",
        "tags": [
          "Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        }
      ]
    },
    "/events/{eventType}/rules": {
      "get": {
        "responses": {
          "200": {
            "description": "Rules were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a list of rules for event",
        "tags": [
          "Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        }
      ],
      "put": {
        "parameters": [
          {
            "description": "Set of rules resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rules were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSet"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Update the rules for event",
        "tags": [
          "Events",
          "Rules"
        ]
      }
    },
    "/events/{eventType}/rules/history": {
      "get": {
        "description": "Retrieve the change history of the selected set of rules.\nThe history is updated each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/RuleSetHistoryItem"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve the change history of the set of rules",
        "tags": [
          "Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        }
      ]
    },
    "/events/{eventType}/rules/history/{version}": {
      "get": {
        "description": "Retrieve the record from the change history of the selected set of rules.\nA history record is created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "History record was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetHistoryItem"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve the record from the change history of the set of rules",
        "tags": [
          "Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ]
    },
    "/events/{eventType}/rules/versions/{version}": {
      "get": {
        "description": "Retrieve the version of the selected set of rules.\nThe versions are created each time you change the rules.\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "Rules version was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/RuleSetVersion"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve the version of the set of rules",
        "tags": [
          "Events",
          "Rules"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/systemEventType"
        },
        {
          "$ref": "#/parameters/rulesVersion"
        }
      ]
    },
    "/files": {
      "get": {
        "description": "Retrieve a list of files\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "in": "query",
            "items": {
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "extension",
                "-extension",
                "size",
                "-size",
                "width",
                "-width",
                "height",
                "-height",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ],
              "type": "string"
            },
            "name": "sort",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Files was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/File"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of files",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$files = $client->files()->search([\n    'filter' => 'name:TestFile',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a file\n",
        "parameters": [
          {
            "description": "Additionally, a file can be sent with a multipart/form-data POST request or the file's raw body can be sent as a request body",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "url": {
                  "description": "The file URL",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "File was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a file",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setUrl('http://test.com/somefile.jpg');\n\ntry {\n    $file = $client->files()->create($fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/files/{id}": {
      "delete": {
        "description": "Delete the File with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "File was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a File",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->files()->delete('fileId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a File with specified identifier string\n",
        "responses": {
          "200": {
            "description": "File was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a File",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$file = $client->files()->load('fileId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Update the File with predefined ID\n",
        "parameters": [
          {
            "description": "File resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Update the File with predefined ID. Note that file can be uploaded with POST only.",
        "tags": [
          "Files"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setDescription('This is a test file');\n\ntry {\n    $file = $client->files()->update('fileId', $fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/files/{id}/download": {
      "get": {
        "description": "Retrieve a file\n",
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "type": "string"
              }
            },
            "schema": {
              "readOnly": true,
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a file",
        "tags": [
          "Files"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/files/{id}/download{extension}": {
      "get": {
        "description": "Used for converting images server-side\n",
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "type": "string"
              }
            },
            "schema": {
              "readOnly": true,
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Used for converting images server-side",
        "tags": [
          "Files"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "description": "File extension which also indicates the desired file format",
          "enum": [
            ".png",
            ".jpg"
          ],
          "in": "path",
          "name": "extension",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/forgot-password": {
      "post": {
        "description": "Sends an email with a link containing a token to reset user password\n",
        "parameters": [
          {
            "description": "Email resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Email sent successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Sends an email with a link containing a token to reset user password",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$forgotPasswordForm = new Rebilly\\Entities\\Email();\n$forgotPasswordForm->setEmail('johndoe@test.com');\n\ntry {\n    $client->users()->forgotPassword($forgotPasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts": {
      "get": {
        "description": "Retrieve a list of gateway accounts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Gateway Accounts was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/GatewayAccount"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of gateway accounts",
        "tags": [
          "Gateway Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccounts = $client->$gatewayAccounts()->search([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a Gateway Account\n",
        "parameters": [
          {
            "description": "Gateway Account resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Gateway Account",
        "tags": [
          "Gateway Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccountForm = new Rebilly\\Entities\\GatewayAccount();\n\n$gatewayAccountForm->setGatewayName('A1Gateway');\n$gatewayAccountForm->setAcquirerName('Bank of Rebilly');\n$gatewayAccountForm->setOrganizationId('organizationId');\n$gatewayAccountForm->setMerchantCategoryCode(5734);\n$gatewayAccountForm->setWebsites([\n    'websiteId1',\n    'websiteId2',\n]);\n$gatewayAccountForm->setPaymentCardSchemes([\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_VISA,\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_MASTERCARD,\n]);\n$gatewayAccountForm->setMethod(Rebilly\\Entities\\PaymentMethod::METHOD_CASH);\n\n$gatewayConfig = [\n    'accountId' => 'test',\n    'password' => '123',\n];\n\n$gatewayAccountForm->setGatewayConfig($gatewayConfig);\n\ntry {\n    $gatewayAccount = $client->gatewayAccounts()->create($gatewayAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/gateway-accounts/{id}": {
      "delete": {
        "description": "Delete a Gateway Account with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Gateway Account was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          }
        },
        "summary": "Delete a Gateway Account",
        "tags": [
          "Gateway Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->gatewayAccounts()->delete('gatewayAccountId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Gateway Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Gateway Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Gateway Account",
        "tags": [
          "Gateway Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccount = $client->gatewayAccounts()->load('gatewayAccountId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "patch": {
        "description": "Update a GatewayAccount with predefined identifier string\n",
        "parameters": [
          {
            "description": "Gateway Account resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Update a Gateway Account with predefined ID",
        "tags": [
          "Gateway Accounts"
        ]
      },
      "put": {
        "description": "Create or update a GatewayAccount with predefined identifier string\n",
        "parameters": [
          {
            "description": "Gateway Account resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a Gateway Account with predefined ID",
        "tags": [
          "Gateway Accounts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$gatewayAccountForm = new Rebilly\\Entities\\GatewayAccount();\n\n$gatewayAccountForm->setGatewayName('A1Gateway');\n$gatewayAccountForm->setAcquirerName('Bank of Rebilly');\n$gatewayAccountForm->setOrganizationId('organizationId');\n$gatewayAccountForm->setMerchantCategoryCode(5734);\n$gatewayAccountForm->setWebsites([\n    'websiteId1',\n    'websiteId2',\n]);\n$gatewayAccountForm->setPaymentCardSchemes([\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_VISA,\n    Rebilly\\Entities\\PaymentCardScheme::SCHEME_MASTERCARD,\n]);\n$gatewayAccountForm->setMethod(Rebilly\\Entities\\PaymentMethod::METHOD_CASH);\n\n$gatewayConfig = [\n    'accountId' => 'test',\n    'password' => '123',\n];\n\n$gatewayAccountForm->setGatewayConfig($gatewayConfig);\n\ntry {\n    $gatewayAccount = $client->gatewayAccounts()->update('gatewayAccountId', $gatewayAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices": {
      "get": {
        "description": "Retrieve a list of invoices\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of invoices was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Invoice"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of invoices",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoices = $client->invoices()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create an invoice\n",
        "parameters": [
          {
            "description": "Invoice resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create an invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n\ntry {\n    $invoice = $client->invoices()->create($invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}": {
      "get": {
        "description": "Retrieve an invoice with specified identifier string\n",
        "parameters": [
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "application/pdf"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "Invoice was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve an invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->load('invoiceId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update an invoice with predefined identifier string\n",
        "parameters": [
          {
            "description": "Invoice resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update an invoice with predefined ID",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n\ntry {\n    $invoice = $client->invoices()->update('invoiceId', $invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/abandon": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Abandon an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was abandoned successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Abandon an invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->abandon('invoiceId');\n"
          }
        ]
      }
    },
    "/invoices/{id}/issue": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Issue an invoice with specified identifier string\n",
        "parameters": [
          {
            "description": "InvoiceIssue resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceIssue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was issued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Issue an invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->issue('invoiceId', '2025-01-01 05:00:00');\n"
          }
        ]
      }
    },
    "/invoices/{id}/items": {
      "get": {
        "description": "Retrieve an invoice items with specified invoice identifier string\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice items were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/InvoiceItem"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve invoice items",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItems = $client->invoiceItems()->search('invoiceId', [\n    'filter' => 'quantity:5',\n]);\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Create an invoice item\n",
        "parameters": [
          {
            "description": "InvoiceItem resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvoiceItem was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create an invoice item",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItemForm = new Rebilly\\Entities\\InvoiceItem();\n$invoiceItemForm->setType($invoiceItemForm::TYPE_DEBIT);\n$invoiceItemForm->setUnitPrice(0.99);\n$invoiceItemForm->setQuantity(5);\n\ntry {\n    $invoiceItem = $client->invoiceItems()->create('invoiceId', $invoiceItemForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/lead-source": {
      "delete": {
        "description": "Delete a Lead Source that belongs to a certain invoice\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "summary": "Delete a Lead Source for an invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->deleteLeadSource('invoiceId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Lead Source of given invoice\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve an invoice's Lead Source",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->load('invoiceId');\n$leadSource = $invoice->getLeadSource();\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a Lead Source for an invoice\n",
        "parameters": [
          {
            "description": "Lead Source resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Lead Source for an invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $invoice = $client->invoices()->updateLeadSource('invoiceId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/void": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Void an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was voided successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Void an invoice",
        "tags": [
          "Invoices"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->void('invoiceId');\n"
          }
        ]
      }
    },
    "/layouts": {
      "get": {
        "description": "Retrieve a layout list\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Layout list was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Layout"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a layout list",
        "tags": [
          "Layouts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layouts = $client->layouts()->search([\n    'filter' => 'name:TestLayout',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a layout\n",
        "parameters": [
          {
            "description": "Layout resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a layout",
        "tags": [
          "Layouts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layoutForm = new Rebilly\\Entities\\Layout();\n$layoutItemForm = new Rebilly\\Entities\\LayoutItem();\n\n$layoutItemForm->setPlanId('planId');\n$layoutItemForm->setStarred(false);\n\n$layoutForm->setName('TestLayout');\n$layoutForm->setLayoutItems([\n    $layoutItemForm,\n]);\n\ntry {\n    $layout = $client->layouts()->create($layoutForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/layouts/{id}": {
      "delete": {
        "description": "Delete a layout with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Layout was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a layout",
        "tags": [
          "Layouts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->layouts()->delete('layoutId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a layout with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Layout was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a layout",
        "tags": [
          "Layouts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layout = $client->layouts()->load('layoutId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a layout with predefined identifier string\n",
        "parameters": [
          {
            "description": "Layout resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Layout was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create or update a layout with predefined ID",
        "tags": [
          "Layouts"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$layoutForm = new Rebilly\\Entities\\Layout();\n$layoutItemForm = new Rebilly\\Entities\\LayoutItem();\n\n$layoutItemForm->setPlanId('planId');\n$layoutItemForm->setStarred(false);\n\n$layoutForm->setName('TestLayout');\n$layoutForm->setLayoutItems([\n    $layoutItemForm,\n]);\n\ntry {\n    $layout = $client->layouts()->update('layoutId', $layoutForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/lists": {
      "get": {
        "description": "Retrieve a collection of Lists\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionCriteria"
          },
          {
            "$ref": "#/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Lists was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/List"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a collection of Lists (latest version of each List)",
        "tags": [
          "Lists"
        ]
      },
      "post": {
        "description": "Create a List\n",
        "parameters": [
          {
            "description": "List resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "List was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a List",
        "tags": [
          "Lists"
        ]
      }
    },
    "/lists/{id}": {
      "delete": {
        "description": "Delete a list with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "List was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "List is used in Rules and cannot be deleted"
          }
        },
        "summary": "Delete a list",
        "tags": [
          "Lists"
        ]
      },
      "get": {
        "description": "Retrieve latest version of List with specified identifier string\n",
        "responses": {
          "200": {
            "description": "List was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve list's latest version",
        "tags": [
          "Lists"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a list with predefined identifier string\n",
        "parameters": [
          {
            "description": "List resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "201": {
            "description": "List was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create or update a list with predefined ID",
        "tags": [
          "Lists"
        ]
      }
    },
    "/lists/{id}/{version}": {
      "get": {
        "responses": {
          "200": {
            "description": "List's exact version was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/List"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve List's exact version",
        "tags": [
          "Lists"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "description": "List version",
          "in": "path",
          "minimum": 1,
          "name": "version",
          "required": true,
          "type": "integer"
        }
      ]
    },
    "/notes": {
      "get": {
        "description": "Retrieve a list of notes\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Notes was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Note"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of notes",
        "tags": [
          "Notes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$notes = $client->notes()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a note\n",
        "parameters": [
          {
            "description": "Note resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a note",
        "tags": [
          "Notes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$noteForm = new Rebilly\\Entities\\Note();\n$noteForm->setRelatedId('customerId');\n$noteForm->setRelatedType(Rebilly\\Entities\\ResourceType::TYPE_CUSTOMER);\n$noteForm->setContent('Test Note');\n\ntry {\n    $note = $client->notes()->create($noteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/notes/{id}": {
      "get": {
        "description": "Retrieve a note with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Note was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a note",
        "tags": [
          "Notes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$note = $client->notes()->load('noteId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a note with predefined identifier string\n",
        "parameters": [
          {
            "description": "Note resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a note with predefined ID",
        "tags": [
          "Notes"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$noteForm = new Rebilly\\Entities\\Note();\n$noteForm->setRelatedId('customerId');\n$noteForm->setRelatedType(Rebilly\\Entities\\ResourceType::TYPE_CUSTOMER);\n$noteForm->setContent('Test Note');\n\ntry {\n    $note = $client->notes()->update('noteId', $noteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "description": "Retrieve a list of organizations\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of organizations was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Organization"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of organizations",
        "tags": [
          "Organizations"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizations = $client->organizations()->search([\n    'filter' => 'city:Test',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a organization\n",
        "parameters": [
          {
            "description": "Organization resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a organization",
        "tags": [
          "Organizations"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizationForm = new Rebilly\\Entities\\Organization();\n$organizationForm->setName('Test Organization');\n$organizationForm->setCountry('US');\n\ntry {\n    $organization = $client->organizations()->create($organizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/organizations/{id}": {
      "delete": {
        "description": "Delete a organization with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Organization was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Organization has related resources and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "summary": "Delete a organization",
        "tags": [
          "Organizations"
        ]
      },
      "get": {
        "description": "Retrieve a organization with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Organization was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a organization",
        "tags": [
          "Organizations"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organization = $client->organizations()->load('organizationId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a organization with predefined identifier string\n",
        "parameters": [
          {
            "description": "Organization resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create or update a organization with predefined ID",
        "tags": [
          "Organizations"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$organizationForm = new Rebilly\\Entities\\Organization();\n$organizationForm->setName('Test Organization');\n$organizationForm->setCountry('US');\n\ntry {\n    $organization = $client->organizations()->update('organizationId', $organizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/password-tokens": {
      "get": {
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Reset Password Tokens was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ResetPasswordToken"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of tokens",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$resetPasswordTokens = $client->resetPasswordTokens()->search([\n    'filter' => 'token:string',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a Reset Password Token\n",
        "parameters": [
          {
            "description": "ResetPasswordToken resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset Password Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Reset Password Token",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$resetPasswordTokenForm = new Rebilly\\Entities\\ResetPasswordToken();\n$resetPasswordTokenForm->setUserName('test');\n$resetPasswordTokenForm->setPassword('1234');\n\ntry {\n    $$resetPasswordToken = $client->resetPasswordTokens()->create($resetPasswordTokenForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/password-tokens/{id}": {
      "delete": {
        "description": "Delete a Reset Password Token with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ResetPasswordToken was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "ResetPasswordToken has related resources and cannot be deleted"
          }
        },
        "summary": "Delete a Reset Password Token",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->websites()->delete('websiteId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Reset Password Token with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ResetPasswordToken was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Reset Password Token",
        "tags": [
          "Customer Authentication"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$resetPasswordToken = $client->resetPasswordTokens()->load('tokenId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/payment-cards": {
      "get": {
        "description": "Retrieve a list of Payments Cards\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Payment Card was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentCard"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of Payment Cards",
        "tags": [
          "Payment Cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCards = $client->paymentCards()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a Payment Card\n",
        "parameters": [
          {
            "description": "PaymentCard resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment Card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Payment Card",
        "tags": [
          "Payment Cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustmerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingContactId('contactId');\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards-migrations": {
      "get": {
        "description": "Retrieve a list of payment cards ready for migration\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of payment cards was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentCard"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of payment cards ready for migration",
        "tags": [
          "Migrate payment cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardMigrations = $client->paymentCardMigrations()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      }
    },
    "/payment-cards-migrations/migrate": {
      "post": {
        "description": "Migrate payment cards to another gateway account\n",
        "parameters": [
          {
            "description": "Payment card migration attributes",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCardMigrationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Migration command was accepted",
            "schema": {
              "$ref": "#/definitions/PaymentCardMigrationResponse"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Migrate payment cards to another gateway account",
        "tags": [
          "Migrate payment cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardMigrationForm = new Rebilly\\Entities\\PaymentCardMigrationsRequest();\n$paymentCardMigrationForm->setFromGatewayAccountId('gatewayAccountId');\n$paymentCardMigrationForm->setToGatewayAccountId('newGatewayAccountId');\n\n$paymentCardIds = [\n    'testPaymentCardId',\n    'testPaymentCardId2',\n];\n\n$paymentCardMigrationForm->setPaymentCardIds($paymentCardIds)\n\ntry {\n    $paymentCardMigrationResponse = $client->paymentCardMigrations()->migrate($paymentCardMigrationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}": {
      "get": {
        "description": "Retrieve a Payment Card with specified identifier string\n",
        "responses": {
          "200": {
            "description": "PaymentCard was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Payment Card",
        "tags": [
          "Payment Cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCard = $client->paymentCards()->load('paymentCardId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "parameters": [
          {
            "description": "Payment card",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Payment card exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a payment card with predefined ID",
        "tags": [
          "Payment Cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustmerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingContactId('contactId');\n\ntry {\n    $paymentCard = $client->paymentCards()->update('paymentCardId', $paymentCardForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/authorization": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Authorize a Payment Card\n",
        "parameters": [
          {
            "description": "Payment Card resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "amount": {
                  "description": "Amount",
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "description": "Currency (three letter code)",
                  "type": "string"
                },
                "gatewayAccountId": {
                  "description": "The Gateway account ID",
                  "type": "string"
                },
                "websiteId": {
                  "description": "The Website ID",
                  "type": "string"
                }
              },
              "required": [
                "websiteId",
                "currency"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Authorization successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Authorize a Payment Card",
        "tags": [
          "Payment Cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardAuthorizationForm = new Rebilly\\Entities\\PaymentCardAuthorization();\n$paymentCardAuthorizationForm->setWebsiteId('websiteId');\n$paymentCardAuthorizationForm->setCurrency('USD');\n$paymentCardAuthorizationForm->setGatewayAccountId('gatewayAccountId');\n\ntry {\n    $paymentCard = $client->paymentCards()->authorize('paymentCardId', $paymentCardAuthorizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Deactivate a Payment Card\n",
        "responses": {
          "201": {
            "description": "Authorization successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Deactivate a Payment Card",
        "tags": [
          "Payment Cards"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->paymentCards()->deactivate('paymentCardId');\n"
          }
        ]
      }
    },
    "/payments": {
      "get": {
        "description": "Retrieve a payment list\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Payment list was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Payment"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a payment list",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payments = $client->payments()->search([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a payment\n",
        "parameters": [
          {
            "description": "Payment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "schema": {
              "items": {
                "$ref": "#/definitions/Payment"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Payment was accepted",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->create($paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "description": "Retrieve a payment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Payment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->load('paymentId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Make a payment with predefined identifier string\n",
        "parameters": [
          {
            "description": "Payment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Payment"
              },
              "type": "array"
            }
          },
          "202": {
            "description": "Payment was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a payment with predefined ID",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->update('paymentId', $paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payments/{id}/lead-source": {
      "delete": {
        "description": "Delete a Lead Source that belongs to a certain payment\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "summary": "Delete a Lead Source for a payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->deleteLeadSource('paymentId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Lead Source of given payment\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a payment's Lead Source",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->load('paymentId');\n$leadSource = $payment->getLeadSource();\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a Lead Source for a payment\n",
        "parameters": [
          {
            "description": "Lead Source resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Lead Source for a payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $payment = $client->payments()->updateLeadSource('paymentId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/plans": {
      "get": {
        "description": "Retrieve a list of plans\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Plans was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Plan"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of plans",
        "tags": [
          "Plans"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plans = $client->plans()->search([\n    'filter' => 'name:TestPlan',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a plan\n",
        "parameters": [
          {
            "description": "Plan resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Plan was created",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a plan",
        "tags": [
          "Plans"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n\ntry {\n    $plan = $client->plans()->create($planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/plans/{id}": {
      "delete": {
        "description": "Delete a Plan with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Plan was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a Plan",
        "tags": [
          "Plans"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->plans()->delete('planId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a plan with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Plan was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a plan",
        "tags": [
          "Plans"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plan = $client->plans()->load('planId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a Plan with predefined identifier string\n",
        "parameters": [
          {
            "description": "Plan resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "201": {
            "description": "Plan was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a Plan with predefined ID",
        "tags": [
          "Plans"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n\ntry {\n    $plan = $client->plans()->update('planId', $planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/previews/rule-actions/send-email": {
      "post": {
        "description": "Send a test email\n",
        "parameters": [
          {
            "description": "Test email resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendTestEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test email was sent",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SendTestEmail"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [
          {
            "RebAuth": []
          }
        ],
        "summary": "Send a test email",
        "tags": [
          "Rules"
        ]
      }
    },
    "/previews/rule-actions/trigger-webhook": {
      "post": {
        "description": "Trigger a test webhook\n",
        "parameters": [
          {
            "description": "Test webhook resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendPreviewWebhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test webhook was triggered",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/SendPreviewWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [
          {
            "RebAuth": []
          }
        ],
        "summary": "Trigger a test webhook",
        "tags": [
          "Rules"
        ]
      }
    },
    "/previews/webhooks": {
      "post": {
        "description": "Trigger a test webhook\n",
        "parameters": [
          {
            "description": "Webhook resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Test webhook was triggered",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Trigger a test webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/products": {
      "get": {
        "description": "Retrieve a list of products\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of products",
        "tags": [
          "Products"
        ]
      },
      "post": {
        "description": "Create a Product\n",
        "parameters": [
          {
            "description": "Product resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a Product",
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{id}": {
      "delete": {
        "description": "Delete a product with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Product was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a product",
        "tags": [
          "Products"
        ]
      },
      "get": {
        "description": "Retrieve a product with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Product was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a product",
        "tags": [
          "Products"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a product with predefined identifier string\n",
        "parameters": [
          {
            "description": "Product resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a product with predefined ID",
        "tags": [
          "Products"
        ]
      }
    },
    "/queue/custom-events": {
      "get": {
        "description": "Retrieve a list of scheduled custom events\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scheduled custom events was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/CustomEvent"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of scheduled custom events",
        "tags": [
          "Custom Events"
        ]
      }
    },
    "/queue/custom-events/{id}": {
      "delete": {
        "description": "Delete a scheduled custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Scheduled custom event was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a scheduled custom event",
        "tags": [
          "Custom Events"
        ]
      },
      "get": {
        "description": "Retrieve a scheduled custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Scheduled custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "303": {
            "description": "Custom event was successfully processed and moved out from queue",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a scheduled custom event",
        "tags": [
          "Custom Events"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/queue/payments": {
      "get": {
        "description": "Retrieve a scheduled payment list\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieve the payments list that still waiting to be processed",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Payment"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a scheduled payment list",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payments = $client->payments()->searchInQueue([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      }
    },
    "/queue/payments/{id}": {
      "get": {
        "description": "Retrieve a payment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Successful retrieve the payment that still waiting to be processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "303": {
            "description": "Payment was successfully processed and moved out from queue",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a scheduled payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->loadFromQueue('paymentId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "parameters": [
          {
            "description": "Payment resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Payment is already handled and cannot be updated"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Update pending payment",
        "tags": [
          "Payments"
        ]
      }
    },
    "/queue/payments/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Cancel a scheduled payment with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Successful cancel the payment",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Cancel a scheduled payment",
        "tags": [
          "Payments"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $payment = $client->payments()->cancel('paymentId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/sessions": {
      "get": {
        "description": "Retrieve a list of sessions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Sessions was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Session"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of sessions",
        "tags": [
          "Sessions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$sessions = $client->sessions()->search([\n    'filter' => 'userId:testUserId',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a session\n",
        "parameters": [
          {
            "description": "Sessions resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a session",
        "tags": [
          "Sessions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$sessionForm = new Rebilly\\Entities\\Session();\n\n$permissions = [\n    // Example permission to use GET and POST methods only for certain Customers\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_CUSTOMERS,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n        ],\n        'resourceIds' => [\n            'testCustomerId',\n            'testCustomerId2',\n        ],\n    ],\n    // Example permission to use all methods for Websites resource\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_WEBSITES,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n            $sessionForm::METHOD_PUT,\n            $sessionForm::METHOD_HEAD,\n            $sessionForm::METHOD_DELETE,\n        ],\n    ],\n    // Example permission to use all methods for all resources\n    [],\n];\n\n$sessionForm->setPermissions($permissions);\n\ntry {\n    $session = $client->sessions()->create($sessionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/sessions/{id}": {
      "delete": {
        "description": "Delete a Session with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Session was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Session has related resources and cannot be deleted"
          }
        },
        "summary": "Delete a Session",
        "tags": [
          "Sessions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->sessions()->delete('sessionId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Session with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Session was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Session",
        "tags": [
          "Sessions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$session = $client->sessions()->load('sessionId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a Session with predefined identifier string\n",
        "parameters": [
          {
            "description": "Session resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a Session with predefined ID",
        "tags": [
          "Sessions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$sessionForm = new Rebilly\\Entities\\Session();\n\n$permissions = [\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_CUSTOMERS,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n        ],\n        'resourceIds' => [\n            'testCustomerId',\n            'testCustomerId2',\n        ],\n    ],\n    [\n        'resourceName' => Rebilly\\Entities\\ResourceType::TYPE_WEBSITES,\n        'methods' => [\n            $sessionForm::METHOD_GET,\n            $sessionForm::METHOD_POST,\n        ],\n        'resourceIds' => [\n            'testWebsiteId',\n            'testWebsiteId2',\n        ],\n    ],\n];\n\n$sessionForm->setPermissions($permissions);\n\ntry {\n    $session = $client->sessions()->update('sessionId', $sessionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/shipping-zones": {
      "get": {
        "description": "Retrieve a list of shipping zones\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of shipping zones was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ShippingZone"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of shipping zones",
        "tags": [
          "Shipping Zones"
        ]
      },
      "post": {
        "description": "Create a Shipping Zone\n",
        "parameters": [
          {
            "description": "Shipping Zone resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Shipping Zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a Shipping Zone",
        "tags": [
          "Shipping Zones"
        ]
      }
    },
    "/shipping-zones/{id}": {
      "delete": {
        "description": "Delete a shipping zone with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Shipping zone was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a shipping zone",
        "tags": [
          "Shipping Zones"
        ]
      },
      "get": {
        "description": "Retrieve a shipping zone with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Shipping zone was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a shipping zone",
        "tags": [
          "Shipping Zones"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a shipping zone with predefined identifier string\n",
        "parameters": [
          {
            "description": "Shipping zone resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shipping zone was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "201": {
            "description": "Shipping zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "summary": "Create a shipping zone with predefined ID",
        "tags": [
          "Shipping Zones"
        ]
      }
    },
    "/signin": {
      "post": {
        "description": "Create a session with email and password\n",
        "parameters": [
          {
            "description": "Signin resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [],
        "summary": "Create a session with email and password",
        "tags": [
          "Users",
          "Sessions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$loginForm = new Rebilly\\Entities\\Login();\n$loginForm->setEmail('test@test.com');\n$loginForm->setPassword('1234');\n\ntry {\n    $user = $client->users()->signin($loginForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/signup": {
      "post": {
        "description": "Creates a new user and sends an email confirmation\n",
        "parameters": [
          {
            "description": "Signup resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Creates a new user and sends an email confirmation",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$signupForm = new Rebilly\\Entities\\Signup();\n$signupForm->setFirstName('John');\n$signupForm->setLastName('Doe');\n$signupForm->setEmail('johndoe@test.com');\n$signupForm->setBusinessPhone('+123456789');\n$signupForm->setPassword('1234');\n\ntry {\n    $client->users()->signup($signupForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/status": {
      "get": {
        "description": "Retrieve API current status\n",
        "responses": {
          "200": {
            "description": "Status was received",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "security": [],
        "summary": "Retrieve API current status",
        "tags": [
          "Status"
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "description": "Retrieve a list of subscriptions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of subscriptions was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Subscription"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of subscriptions",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptions = $client->subscriptions()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a subscription\n",
        "parameters": [
          {
            "description": "Subscription resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setPlanId('planId');\n\ntry {\n    $subscription = $client->subscriptions()->create($subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "description": "Retrieve a subscription with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Subscription was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->load('subscriptionId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a subscription with predefined identifier string\n",
        "parameters": [
          {
            "description": "Subscription resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a subscription with predefined ID",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setPlanId('planId');\n\ntry {\n    $subscription = $client->subscriptions()->update('subscriptionId', $subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Cancel a subscription\n",
        "parameters": [
          {
            "description": "Only policy",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCancel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was switched",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Cancel a subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionCancelForm = new Rebilly\\Entities\\SubscriptionCancel();\n$subscriptionCancelForm->setPolicy($subscriptionCancelForm::NOW);\n\ntry {\n    $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/lead-source": {
      "delete": {
        "description": "Delete a Lead Source that belongs to a certain Subscription\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "summary": "Delete a Lead Source for a Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->deleteLeadSource('subscriptionId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a Lead Source of given subscription\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a subscription's Lead Source",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->load('subscriptionId');\n$leadSource = $subscription->getLeadSource();\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create a Lead Source for a Subscription\n",
        "parameters": [
          {
            "description": "Lead Source resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a Lead Source for a Subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $subscription = $client->subscriptions()->updateLeadSource('subscriptionId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/switch": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Switch a subscription\n",
        "parameters": [
          {
            "description": "SubscriptionSwitch resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionSwitch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was switched",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Switch a subscription",
        "tags": [
          "Subscriptions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionSwitchForm = new Rebilly\\Entities\\SubscriptionSwitch();\n$subscriptionSwitchForm->setPlanId('newPlanId');\n$subscriptionSwitchForm->setPolicy($subscriptionSwitchForm::NOW);\n\ntry {\n    $subscription = $client->subscriptions()->switchTo('subscriptionId', $subscriptionSwitchForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/tax-categories": {
      "get": {
        "description": "Retrieve a list of tax categories\n",
        "responses": {
          "200": {
            "description": "A list of tax categories was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/TaxCategory"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of tax categories",
        "tags": [
          "Taxes"
        ]
      }
    },
    "/tokens": {
      "get": {
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tokens was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentToken"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of tokens",
        "tags": [
          "Payment Tokens"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokens = $client->paymentCardTokens()->search([\n    'filter' => 'token:string',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a token\n",
        "parameters": [
          {
            "description": "PaymentToken resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "security": [
          {
            "RebAuth": []
          }
        ],
        "summary": "Create a payment token",
        "tags": [
          "Payment Tokens"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokenForm = new Rebilly\\Entities\\PaymentCardToken();\n$paymentCardTokenForm->setFirstName('John');\n$paymentCardTokenForm->setLastName('Doe');\n$paymentCardTokenForm->setMethod(Rebilly\\Entities\\PaymentMethod::METHOD_PAYMENT_CARD);\n\n$paymentInstrumentForm = new Entities\\PaymentInstruments\\PaymentCardPaymentInstrument();\n$paymentInstrumentForm->setPan('4111111111111111');\n$paymentInstrumentForm->setExpYear(2025);\n$paymentInstrumentForm->setExpMonth(8);\n$paymentInstrumentForm->setCvv(123);\n\n$paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/tokens/{token}": {
      "get": {
        "description": "Retrieve a token with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Token was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "security": [
          {
            "RebAuth": []
          }
        ],
        "summary": "Retrieve a token",
        "tags": [
          "Payment Tokens"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardToken = $client->paymentCardTokens()->load('tokenId');\n"
          }
        ]
      },
      "parameters": [
        {
          "description": "The token identifier string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/tokens/{token}/expiration": {
      "parameters": [
        {
          "description": "The token identifier string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Expire a token\n",
        "parameters": [
          {
            "description": "PaymentToken resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Token expiration successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Expire a token",
        "tags": [
          "Payment Tokens"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $paymentCardToken = $client->paymentCardTokens()->expire('tokenId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/tracking/api": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking API logs was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/ApiTracking"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of tracking API logs",
        "tags": [
          "Tracking"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiTrackingLog = $client->apiTracking()->search([\n    'filter' => 'status:200',\n]);\n"
          }
        ]
      }
    },
    "/tracking/api/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Tracking API log was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a tracking API log with specified identifier string",
        "tags": [
          "Tracking"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$apiTrackingLog = $client->apiTracking()->load('apiLogId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/tracking/lists": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists changes history was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/List"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve Lists changes history",
        "tags": [
          "Tracking"
        ]
      }
    },
    "/tracking/subscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking subscription logs was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/SubscriptionTracking"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of tracking subscription logs",
        "tags": [
          "Tracking"
        ]
      }
    },
    "/tracking/subscriptions/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Tracking subscription log was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a tracking subscription log with specified identifier string",
        "tags": [
          "Tracking"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/tracking/website-webhooks": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking webhook notifications was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/WebsiteWebhookTracking"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of tracking webhook notifications",
        "tags": [
          "Tracking"
        ]
      }
    },
    "/tracking/website-webhooks/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Tracking webhook notification was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/WebsiteWebhookTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a tracking webhook notification with specified identifier string",
        "tags": [
          "Tracking"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/transactions": {
      "get": {
        "description": "Retrieve a list of transactions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of transactions was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Transaction"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of transactions",
        "tags": [
          "Transactions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transactions = $client->transactions()->search([\n    'filter' => 'result:approved',\n]);\n"
          }
        ]
      }
    },
    "/transactions/{id}": {
      "get": {
        "description": "Retrieve a Transaction with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Transaction was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Transaction",
        "tags": [
          "Transactions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->load('transactionId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/transactions/{id}/gateway-logs": {
      "get": {
        "description": "Retrieve Gateway communication Logs for Transaction with specified identifier string",
        "responses": {
          "200": {
            "description": "Logs were retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TransactionGatewayLog"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a Transaction Gateway Logs",
        "tags": [
          "Transactions"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ]
    },
    "/transactions/{id}/refund": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Refund a Transaction with specified identifier string.\nNote that the refund will be in the same currency as the original transaction.\n",
        "parameters": [
          {
            "description": "Transaction resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRefund"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction was refunded successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Refund a Transaction",
        "tags": [
          "Transactions"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->refund('transactionId', 1.99);\n"
          }
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Retrieve a list of users\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of users",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$users = $client->users()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create an user\n",
        "parameters": [
          {
            "description": "User resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create an user",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$userForm = new Rebilly\\Entities\\User();\n$userForm->setFirstName('John');\n$userForm->setLastName('Doe');\n$userForm->setEmail('johndoe@test.com');\n\ntry {\n    $user = $client->users()->create($userForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/reset-password/{token}": {
      "parameters": [
        {
          "description": "The token string",
          "in": "path",
          "name": "token",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Reset user password\n",
        "parameters": [
          {
            "description": "ResetPassword resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password was reseted successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Reset user password",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$resetPasswordForm = new Rebilly\\Entities\\ResetPassword();\n$resetPasswordForm->setNewPassword('1234');\n\ntry {\n    $user = $client->users()->resetPassword('userId', 'token', $resetPasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "description": "Delete user with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "User was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict",
            "description": "User has related resources and cannot be deleted"
          }
        },
        "summary": "Delete user",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->users()->delete('userId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve user with specified identifier string\n",
        "responses": {
          "200": {
            "description": "User was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve user",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$user = $client->users()->load('userId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update user with predefined identifier string\n",
        "parameters": [
          {
            "description": "User resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError",
            "description": "Invalid data was sent"
          }
        },
        "summary": "Create or update user with predefined ID",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$userForm = new Rebilly\\Entities\\User();\n$userForm->setFirstName('John');\n$userForm->setLastName('Doe');\n$userForm->setEmail('johndoe@test.com');\n\ntry {\n    $user = $client->users()->update('userId', $userForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}/password": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.\n",
        "parameters": [
          {
            "description": "currentPassword and newPassword",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError",
            "description": "Invalid data was sent"
          }
        },
        "summary": "Updates user's password with the specified newPassword",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$updatePasswordForm = new Rebilly\\Entities\\UpdatePassword();\n$updatePasswordForm->setCurrentPassword('1234');\n$updatePasswordForm->setNewPassword('5678');\n\ntry {\n    $user = $client->users()->updatePassword('userId', $updatePasswordForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/users/{id}/totp-reset": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "description": "Reset (renew) totpSecret\n",
        "responses": {
          "201": {
            "description": "totpSecret reset (renewed) successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Reset (renew) totpSecret",
        "tags": [
          "Users"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$user = $client->users()->resetTotp('userId');\n"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "description": "Retrieve a list of webhooks\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Webhooks was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/GlobalWebhook"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of webhooks",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "description": "Create a webhook\n",
        "parameters": [
          {
            "description": "Webhook resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Webhook was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "description": "Retrieve a webhook with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a webhook with predefined identifier string\n",
        "parameters": [
          {
            "description": "Webhook resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "201": {
            "description": "Webhook was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GlobalWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a webhook with predefined ID",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/websites": {
      "get": {
        "description": "Retrieve a list of websites\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "default": "application/json",
            "description": "The response media type",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "in": "header",
            "name": "Accept",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of Websites was retrieved successfully",
            "headers": {
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "items": {
                "$ref": "#/definitions/Website"
              },
              "type": "array"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "summary": "Retrieve a list of websites",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websites = $client->websites()->search([\n    'filter' => 'name:TestWebsite',\n]);\n"
          }
        ]
      },
      "post": {
        "description": "Create a website\n",
        "parameters": [
          {
            "description": "Website resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Website"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create a website",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteForm = new Rebilly\\Entities\\Website();\n$websiteForm->setName('TestWebsite');\n$websiteForm->setUrl('http://testwebsite.com');\n$websiteForm->setServicePhone('+0123456789');\n$websiteForm->setServiceEmail('test@testwebsite.com');\n\ntry {\n    $website = $client->websites()->create($websiteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/websites/{id}": {
      "delete": {
        "description": "Delete a website with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Website was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Website has related resources and cannot be deleted"
          }
        },
        "summary": "Delete a website",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $client->websites()->delete('websiteId');\n} catch (ServerException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a website with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Website was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a website",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$website = $client->websites()->load('websiteId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a website with predefined identifier string\n",
        "parameters": [
          {
            "description": "Website resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Website"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Website was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a website with predefined ID",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteForm = new Rebilly\\Entities\\Website();\n$websiteForm->setName('TestWebsite');\n$websiteForm->setUrl('http://testwebsite.com');\n$websiteForm->setServicePhone('+0123456789');\n$websiteForm->setServiceEmail('test@testwebsite.com');\n\ntry {\n    $website = $client->websites()->update('websiteId', $websiteForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/websites/{id}/webhook": {
      "delete": {
        "description": "Delete a webhook that belongs to a website with predefined ID\n",
        "responses": {
          "204": {
            "description": "Webhook was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Delete a webhook",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->websiteWebhook()->delete('websiteId');\n"
          }
        ]
      },
      "get": {
        "description": "Retrieve a webhook for website with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/WebsiteWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "summary": "Retrieve a webhook for website",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteWebhook = $client->websiteWebhook()->load('websiteId');\n"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "put": {
        "description": "Create or update a webhook for website with predefined identifier string\n",
        "parameters": [
          {
            "description": "Webhook resource",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebsiteWebhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was updated",
            "schema": {
              "$ref": "#/definitions/WebsiteWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "summary": "Create or update a webhook for website with predefined ID",
        "tags": [
          "Websites"
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$websiteWebhookForm = new Rebilly\\Entities\\WebsiteWebhook();\n$websiteWebhookForm->setWebHookUrl('http://testwebsite.com/webhook');\n$websiteWebhookForm->setWebHookUsername('test');\n$websiteWebhookForm->setWebHookPassword('1234');\n\ntry {\n    $website = $client->websiteWebhook()->update('websiteId', $websiteWebhookForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    }
  },
  "definitions": {
    "A1Gateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "description": "A1Gateway credentials object",
              "properties": {
                "accountId": {
                  "description": "A1Gateway account ID",
                  "type": "string"
                },
                "password": {
                  "description": "A1Gateway password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "A1Gateway config"
    },
    "AcquirerName": {
      "description": "Acquirer name",
      "enum": [
        "Alipay",
        "AIB",
        "B+S",
        "Bank of America",
        "Bank of Moscow",
        "Bank of Rebilly",
        "Bank One",
        "Beanstream",
        "BMO Harris Bank",
        "Borgun",
        "BraintreePayments",
        "Catalunya Caixa",
        "Chase",
        "ChinaUnionPay",
        "CIM",
        "Credorax",
        "Elavon",
        "EMS",
        "Fifth Third Bank",
        "First Data Buypass",
        "First Data Nashville",
        "First Data North",
        "First Data Omaha",
        "Flexepin",
        "Forte",
        "FundSend",
        "GlobalCollect",
        "Global East",
        "Heartland",
        "HSBC",
        "iCheque",
        "Ilixium",
        "Masapay",
        "Merrick",
        "Mission Valley Bank",
        "Moneris",
        "NATWEST",
        "NMI",
        "OchaPay",
        "Other",
        "Panda Bank",
        "PayPal",
        "PayR",
        "Payvision",
        "Peoples Trust Company",
        "Privatbank",
        "RBC",
        "RBS WorldPay",
        "RealTime",
        "RebillyProcessor",
        "State Bank of Mauritius",
        "Stripe",
        "TBI",
        "TrustPay",
        "TSYS",
        "UPayCard",
        "Vantiv",
        "VoicePay",
        "WeChat Pay",
        "Wells Fargo",
        "Wing Hang Bank",
        "Wirecard",
        "WorldPay"
      ],
      "type": "string"
    },
    "AmexVPC": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "description": "AmexVPC credentials object",
              "properties": {
                "accessCode": {
                  "description": "Access Code",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Merchant ID",
                  "type": "string"
                },
                "password": {
                  "description": "Password (used for refund, void and capture)",
                  "format": "password",
                  "type": "string"
                },
                "url": {
                  "description": "Virtual Payment Client URL",
                  "type": "string"
                },
                "user": {
                  "description": "User (used for refund, void and capture)",
                  "type": "string"
                }
              },
              "required": [
                "url",
                "merchantId",
                "accessCode",
                "user",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "AmexVPC config"
    },
    "AmountAdjustment": {
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "none",
            "partial",
            "discount"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "ApiKey": {
      "description": "API secret Key.",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "apiUser": {
          "description": "API user name",
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The API key created time"
        },
        "datetimeFormat": {
          "default": "iso8601",
          "description": "Date time format",
          "enum": [
            "mysql",
            "iso8601"
          ],
          "type": "string"
        },
        "description": {
          "description": "API key description",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "secretKey": {
          "description": "API secret key's value",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApiTracking": {
      "description": "Tracking API Requests.",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log created time"
        },
        "duration": {
          "description": "Request duration in milliseconds",
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "method": {
          "description": "HTTP method",
          "enum": [
            "HEAD",
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "type": "string"
        },
        "request": {
          "description": "Request JSON-string",
          "type": "string"
        },
        "requestHeaders": {
          "description": "Request headers array",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "response": {
          "description": "Response JSON-string",
          "type": "string"
        },
        "responseHeaders": {
          "description": "Response headers array",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "description": "HTTP response code",
          "type": "integer"
        },
        "url": {
          "description": "API request address",
          "type": "string"
        },
        "user": {
          "description": "The user who has made a request",
          "properties": {
            "apiKeyId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "email": {
              "description": "The user email",
              "format": "email",
              "type": "string"
            },
            "fingerprint": {
              "description": "The user device fingerprint hash",
              "type": "string"
            },
            "firstName": {
              "description": "The user first name",
              "type": "string"
            },
            "ipAddress": {
              "description": "Client IP address",
              "format": "ipv4",
              "type": "string"
            },
            "isSupport": {
              "description": "If user from support",
              "type": "boolean"
            },
            "lastName": {
              "description": "The user last name",
              "type": "string"
            },
            "userAgent": {
              "description": "The software that is acting on behalf of a user",
              "type": "string"
            },
            "userId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          },
          "readOnly": true,
          "type": "object"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "ApprovalUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "approval_url"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Attachment": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/FileLink"
            },
            {
              "$ref": "#/definitions/AttachmentResourceLink"
            }
          ],
          "maxItems": 3,
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Creation date/time"
        },
        "description": {
          "description": "The Attachment description",
          "type": "string"
        },
        "fileId": {
          "description": "Linked File object id",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "name": {
          "description": "The Original Attachment name",
          "type": "string"
        },
        "relatedId": {
          "description": "Linked object Id",
          "type": "string"
        },
        "relatedType": {
          "description": "Linked object type",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Latest update date/time"
        }
      },
      "required": [
        "fileId",
        "relatedId",
        "relatedType"
      ],
      "type": "object"
    },
    "AttachmentResourceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "AuthenticationOptions": {
      "properties": {
        "authTokenTtl": {
          "description": "The default lifetime of the auth-token in seconds",
          "type": "integer"
        },
        "credentialTtl": {
          "description": "The default lifetime of the credential in seconds",
          "type": "integer"
        },
        "passwordPattern": {
          "description": "Allowed password pattern",
          "type": "string"
        },
        "resetTokenTtl": {
          "description": "The default lifetime of the reset-token in seconds",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AuthenticationToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "credentialId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The credential's ID",
          "readOnly": true
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The token's customer ID",
          "readOnly": true
        },
        "expiredTime": {
          "description": "Token's expired time",
          "format": "date-time",
          "type": "string"
        },
        "password": {
          "description": "The token's password (write-only)",
          "format": "password",
          "type": "string"
        },
        "token": {
          "description": "The token identifier string",
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "AuthorizeNet": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiLoginId": {
                  "description": "AuthorizeNet Gateway api login ID",
                  "type": "string"
                },
                "transactionKey": {
                  "description": "AuthorizeNet Gateway Transaction Key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiLoginId",
                "transactionKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "AuthorizeNet Gateway config"
    },
    "BankAccount": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/ContactLink"
            }
          ],
          "maxItems": 3,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "accountNumber": {
          "description": "Bank's Account Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountType": {
          "description": "Banks's Account type. Required if bank account is not created from Token",
          "type": "string"
        },
        "bankName": {
          "description": "Bank's name.",
          "type": "string"
        },
        "contactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Contact ID. Required if bank account is not created from Token"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Bank Account created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID."
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The bank account identifier string",
          "readOnly": true
        },
        "routingNumber": {
          "description": "Bank's Routing Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "status": {
          "description": "Bank Account status",
          "enum": [
            "active",
            "deactivated"
          ],
          "type": "string"
        },
        "token": {
          "description": "Bank Account Token. Use without any other fields",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Bank Account updated time"
        }
      },
      "type": "object"
    },
    "BankAccountLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "bankAccount"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Beanstream": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiPasscode": {
                  "description": "Beanstream Gateway API Passcode",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Beanstream Gateway merchant ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "apiPasscode"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Beanstream Gateway config"
    },
    "BillingContactLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "billingContact"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Blacklist": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The blacklist created time"
        },
        "expiredTime": {
          "description": "The blacklist expired time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The blacklist identifier string",
          "readOnly": true
        },
        "type": {
          "description": "The blacklist type",
          "enum": [
            "payment-card-id",
            "customer-id",
            "email",
            "ip-address",
            "country",
            "fingerprint",
            "bin"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The blacklist updated time"
        },
        "value": {
          "description": "The blacklist value",
          "type": "string"
        }
      },
      "required": [
        "type",
        "value"
      ],
      "type": "object"
    },
    "BraintreePayments": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantAccountId": {
                  "description": "BraintreePayments merchant account ID",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "BraintreePayments merchant ID",
                  "format": "password",
                  "type": "string"
                },
                "privateKey": {
                  "description": "BraintreePayments Private Key",
                  "format": "password",
                  "type": "string"
                },
                "publicKey": {
                  "description": "BraintreePayments Public Key",
                  "type": "string"
                }
              },
              "required": [
                "publicKey",
                "privateKey",
                "merchantId",
                "merchantAccountId"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "BraintreePayments Gateway config"
    },
    "CardinalCommerce": {
      "allOf": [
        {
          "$ref": "#/definitions/Mpi"
        },
        {
          "properties": {
            "merchantId": {
              "description": "Cardinal MerchantId",
              "type": "string"
            },
            "processorId": {
              "description": "Cardinal ProcessorId",
              "type": "string"
            },
            "transactionPwd": {
              "description": "Cardinal TransactionPwd",
              "format": "password",
              "type": "string"
            }
          },
          "required": [
            "merchantId",
            "processorId",
            "transactionPwd"
          ],
          "type": "object"
        }
      ],
      "description": "CardinalCommerce Mpi Credentials"
    },
    "Cashflows": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "authId": {
                  "description": "Cashflows Gateway auth ID",
                  "type": "string"
                },
                "authPassword": {
                  "description": "Cashflows Gateway auth password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "authPassword",
                "authId"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Cashflows Gateway config"
    },
    "Cayan": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantKey": {
                  "description": "Cayan Gateway merchant key",
                  "format": "password",
                  "type": "string"
                },
                "merchantName": {
                  "description": "Cayan Gateway merchant name",
                  "type": "string"
                },
                "merchantSiteId": {
                  "description": "Cayan Gateway merchant site ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantSiteId",
                "merchantName",
                "merchantKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Cayan Gateway config"
    },
    "Chase": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "coNumber": {
                  "description": "Chase Gateway CO Number used for delimited file reports",
                  "type": "string"
                },
                "divisionId": {
                  "description": "Chase Gateway division ID",
                  "type": "string"
                },
                "partialAuth": {
                  "default": false,
                  "description": "Support for Partial Auths",
                  "type": "boolean"
                },
                "password": {
                  "description": "Chase Gateway Net Connect password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "Chase Gateway Net Connect username",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "coNumber",
                "divisionId",
                "partialAuth"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Chase Gateway config"
    },
    "CheckoutPage": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "allowCustomCustomerId": {
          "description": "If to enable your own customer ID in requests",
          "type": "boolean"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Checkout page identifier string",
          "readOnly": true
        },
        "isActive": {
          "description": "If checkout page active",
          "type": "boolean"
        },
        "name": {
          "description": "Checkout page name",
          "type": "string"
        },
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Checkout page plan ID",
          "type": "string"
        },
        "redirectTimeout": {
          "description": "Checkout page redirect timeout",
          "type": "integer"
        },
        "redirectUrl": {
          "description": "Checkout page url",
          "type": "string"
        },
        "uriPath": {
          "description": "Your own custom uri path for this Checkout Page. It will be appended to checkout url https://checkout.rebilly.com/website/<uriPath>",
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Checkout page website ID",
          "type": "string"
        }
      },
      "required": [
        "name",
        "planId",
        "websiteId",
        "uriPath"
      ],
      "type": "object"
    },
    "ChinaUnionPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountId": {
                  "description": "China Union Pay Gateway account ID",
                  "type": "string"
                },
                "goods": {
                  "description": "China Union Pay Gateway goods",
                  "type": "string"
                },
                "md5key": {
                  "description": "China Union Pay Gateway md5key",
                  "format": "password",
                  "type": "string"
                },
                "mobilePay": {
                  "description": "China Union Pay Gateway mobile pay param",
                  "type": "string"
                },
                "partyId": {
                  "description": "China Union Pay Gateway party ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "partyId",
                "goods",
                "md5key",
                "mobilePay"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "China Union Pay Gateway config"
    },
    "Condition": {
      "discriminator": "op",
      "properties": {
        "op": {
          "description": "The condition operation",
          "enum": [
            "and",
            "or",
            "not",
            "between",
            "equals",
            "in",
            "gt",
            "gte",
            "lt",
            "lte"
          ],
          "type": "string"
        }
      },
      "required": [
        "op"
      ],
      "type": "object"
    },
    "Contact": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "The contact street address",
          "maxLength": 60,
          "type": "string"
        },
        "address2": {
          "description": "The contact street address (second line)",
          "maxLength": 60,
          "type": "string"
        },
        "city": {
          "description": "The contact city",
          "maxLength": 45,
          "type": "string"
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "pattern": "^[A-Z]{2}$",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The contact created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The contact customer ID"
        },
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The contact identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The contact phone number",
          "type": "string"
        },
        "postalCode": {
          "description": "The contact postal code",
          "maxLength": 10,
          "type": "string"
        },
        "region": {
          "description": "The contact region (state)",
          "maxLength": 45,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The contact updated time"
        }
      },
      "type": "object"
    },
    "ContactLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "contact"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Coupon": {
      "description": "Coupons and Discounts",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon created time"
        },
        "description": {
          "description": "Your coupon description. When it is not empty this is used for invoice discount item description,\notherwise the item's description uses coupon's redemptionCode like 'Coupon \"redemptionCode\"'\n",
          "type": "string"
        },
        "discount": {
          "$ref": "#/definitions/Discount"
        },
        "expiredTime": {
          "description": "Coupon's expire time (end time)",
          "format": "date-time",
          "type": "string"
        },
        "issuedTime": {
          "description": "Coupon's issued time (start time)",
          "format": "date-time",
          "type": "string"
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code",
          "readOnly": true
        },
        "redemptionsCount": {
          "description": "Coupon's redemptions count",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "restrictions": {
          "description": "Coupon restrictions",
          "items": [
            {
              "$ref": "#/definitions/CouponRestriction"
            }
          ],
          "type": "array"
        },
        "status": {
          "description": "If coupon enabled",
          "enum": [
            "issued",
            "expired"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon updated time."
        }
      },
      "required": [
        "discount",
        "issuedTime"
      ],
      "type": "object"
    },
    "CouponRedemption": {
      "description": "Coupons redemption log",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "additionalRestrictions": {
          "description": "Additional restrictions for coupon's redemptions",
          "items": [
            {
              "$ref": "#/definitions/RedemptionRestriction"
            }
          ],
          "type": "array"
        },
        "canceledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon redemption canceled time",
          "readOnly": true
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Customer's ID"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "redeemedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Coupon redeem time",
          "readOnly": true
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code"
        }
      },
      "type": "object"
    },
    "CouponRestriction": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "type": {
              "description": "Coupon's restriction type",
              "enum": [
                "discounts-per-redemption",
                "redemptions-per-customer",
                "restrict-to-invoices",
                "restrict-to-plans",
                "restrict-to-subscriptions",
                "minimum-order-amount",
                "total-redemptions"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Coupon restrictions",
      "type": "object"
    },
    "Credential": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "customerId": {
          "description": "The credential's customer ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "The credential's expired time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The credential identifier string",
          "readOnly": true
        },
        "password": {
          "description": "The credential's password",
          "format": "password",
          "type": "string"
        },
        "username": {
          "description": "Credential's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password",
        "customerId"
      ],
      "type": "object"
    },
    "Credorax": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantId": {
                  "description": "Credorax Gateway merchant ID",
                  "type": "string"
                },
                "merchantMd5Signature": {
                  "description": "Credorax Gateway md5 signature",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "merchantMd5Signature"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Credorax Gateway config"
    },
    "CustomEvent": {
      "properties": {
        "chronology": {
          "description": "The arrangement of events in the order of their occurrence",
          "enum": [
            "before",
            "after"
          ],
          "type": "string"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "description": {
          "description": "The custom event description",
          "type": "string"
        },
        "eventType": {
          "$ref": "#/definitions/CustomEventType"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The custom event identifier string",
          "readOnly": true
        },
        "scheduleInstruction": {
          "$ref": "#/definitions/ScheduleMethod"
        },
        "title": {
          "description": "The custom event title",
          "type": "string"
        }
      },
      "required": [
        "eventType",
        "title",
        "chronology",
        "scheduleInstruction"
      ],
      "type": "object"
    },
    "CustomEventType": {
      "description": "Rebilly custom event type",
      "enum": [
        "subscription-ended",
        "subscription-trial-ended",
        "payment-card-expired",
        "invoice-past-due"
      ],
      "readOnly": true,
      "type": "string"
    },
    "CustomField": {
      "description": "A separate Custom Field schema",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "additionalSchema": {
          "description": "Additional parameters which can be added according to type:\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\n"
        },
        "description": {
          "description": "The custom field description",
          "type": "string"
        },
        "name": {
          "description": "The name of the custom field",
          "type": "string"
        },
        "type": {
          "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
          "enum": [
            "array",
            "boolean",
            "datetime",
            "integer",
            "number",
            "string",
            "monetary"
          ],
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "Customer": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            },
            {
              "$ref": "#/definitions/DefaultPaymentInstrumentLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "minItems": 3,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The customer created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "defaultPaymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "email": {
          "description": "The customer email",
          "format": "email",
          "maxLength": 100,
          "type": "string"
        },
        "firstName": {
          "description": "The customer first name",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer identifier string",
          "readOnly": true
        },
        "ipAddress": {
          "description": "The customer IP",
          "format": "ipv4",
          "type": "string"
        },
        "lastName": {
          "description": "The customer last name",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The customer updated time"
        }
      },
      "type": "object"
    },
    "CustomerLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "customer"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Datacash": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "client": {
                  "description": "Datacash Gateway client",
                  "type": "string"
                },
                "delay": {
                  "default": 0,
                  "description": "Auto Capture delay (in hours)",
                  "minimum": 0,
                  "type": "integer"
                },
                "password": {
                  "description": "Datacash Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "policy": {
                  "default": 2,
                  "description": "Policy",
                  "maximum": 7,
                  "minimum": 0,
                  "type": "integer"
                }
              },
              "required": [
                "client",
                "password",
                "policy",
                "delay"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Datacash Gateway config"
    },
    "DayOfWeek": {
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ],
      "type": "string"
    },
    "DefaultPaymentInstrumentLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "defaultPaymentInstrument"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "DeliveryContactLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "deliveryContact"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Dengi": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "projectId": {
                  "description": "Dengi Gateway project ID",
                  "type": "string"
                },
                "publicKey": {
                  "description": "Dengi Gateway public key",
                  "format": "password",
                  "type": "string"
                },
                "refundKey": {
                  "description": "Dengi Gateway refund key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "projectId",
                "publicKey",
                "refundKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Dengi Gateway config"
    },
    "Discount": {
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Discount type",
          "enum": [
            "fixed",
            "percent"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Dispute": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acquirerReferenceNumber": {
          "description": "The dispute's acquirer reference number",
          "type": "string"
        },
        "amount": {
          "description": "The dispute amount",
          "format": "double",
          "type": "number"
        },
        "category": {
          "description": "The dispute's category",
          "enum": [
            "fraud",
            "unrecognized",
            "product-not-received",
            "product-unacceptable",
            "product-not-refunded",
            "duplicate",
            "subscription-canceled",
            "uncategorized"
          ],
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute created time"
        },
        "currency": {
          "description": "The dispute currency ISO Alpha code",
          "type": "string"
        },
        "customerId": {
          "description": "The dispute's customer ID",
          "readOnly": true,
          "type": "string"
        },
        "deadlineTime": {
          "description": "Dispute deadline time",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The dispute identifier string",
          "readOnly": true
        },
        "postedTime": {
          "description": "Dispute posted time",
          "format": "date-time",
          "type": "string"
        },
        "rawResponse": {
          "description": "Dispute raw response from gateway",
          "readOnly": true,
          "type": "string"
        },
        "reasonCode": {
          "description": "The dispute's reason code",
          "enum": [
            "1000",
            "12",
            "2",
            "30",
            "31",
            "35",
            "37",
            "40",
            "41",
            "42",
            "46",
            "47",
            "49",
            "50",
            "53",
            "54",
            "55",
            "57",
            "59",
            "60",
            "62",
            "7",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "79",
            "8",
            "80",
            "81",
            "82",
            "83",
            "85",
            "86",
            "93",
            "00",
            "63",
            "A01",
            "A02",
            "A08",
            "F10",
            "F14",
            "F22",
            "F24",
            "F29",
            "C02",
            "C04",
            "C05",
            "C08",
            "C14",
            "C18",
            "C28",
            "C31",
            "C32",
            "M10",
            "M49",
            "P01",
            "P03",
            "P04",
            "P05",
            "P07",
            "P08",
            "P22",
            "P23",
            "R03",
            "R13",
            "M01",
            "FR1",
            "FR4",
            "FR6",
            "AL",
            "AP",
            "AW",
            "CA",
            "CD",
            "CR",
            "DA",
            "DP",
            "DP1",
            "EX",
            "IC",
            "IN",
            "IS",
            "LP",
            "N",
            "NA",
            "NC",
            "P",
            "RG",
            "RM",
            "RN1",
            "RN2",
            "SV",
            "TF",
            "TNM",
            "UA01",
            "UA02",
            "UA32",
            "UA99",
            "UA03",
            "UA10",
            "UA11",
            "UA12",
            "UA18",
            "UA20",
            "UA21",
            "UA22",
            "UA23",
            "UA28",
            "UA30",
            "UA31",
            "UA38",
            "duplicate",
            "fraudulent",
            "subscription_canceled",
            "product_unacceptable",
            "product_not_received",
            "unrecognized",
            "credit_not_processed",
            "customer_initiated",
            "incorrect_account_details",
            "insufficient_funds",
            "bank_cannot_process",
            "debit_not_authorized",
            "general"
          ],
          "type": "string"
        },
        "resolvedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute resolved time"
        },
        "status": {
          "description": "The dispute's status",
          "enum": [
            "response-needed",
            "under-review",
            "forfeited",
            "won",
            "lost",
            "unknown"
          ],
          "type": "string"
        },
        "transactionId": {
          "description": "The dispute's transaction ID",
          "type": "string"
        },
        "type": {
          "description": "The dispute's type",
          "enum": [
            "information-request",
            "first-chargeback",
            "second-chargeback",
            "arbitration"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Dispute updated time"
        }
      },
      "required": [
        "currency",
        "transactionId",
        "postedTime",
        "type",
        "status",
        "reasonCode"
      ],
      "type": "object"
    },
    "DisputeEvidence": {
      "properties": {
        "accessLogs": {
          "description": "The id of a file upload with the access logs showing the customer activity.",
          "type": "string"
        },
        "additionalFile": {
          "description": "Any additional evidence as a file upload id.",
          "type": "string"
        },
        "customerCommunication": {
          "description": "The id of a file upload showing communication with the customer (for example emails).",
          "type": "string"
        },
        "customerSignature": {
          "description": "The id of a file upload showing the signed contract or signed delivery receipt.",
          "type": "string"
        },
        "deliveryProof": {
          "description": "The id of a file upload showing the proof of delivery.",
          "type": "string"
        },
        "explanation": {
          "description": "An explanation relevant to the category of dispute.",
          "type": "string"
        },
        "policy": {
          "description": "The id of a file upload with the policy materials (may include the cancellation policy, refund policy, and terms of use).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EMerchantPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKey": {
                  "description": "EMerchantPay Gateway api key",
                  "format": "password",
                  "type": "string"
                },
                "clientId": {
                  "description": "EMerchantPay Gateway client ID",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "apiKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "EMerchantPay Gateway config"
    },
    "Email": {
      "properties": {
        "email": {
          "description": "Email",
          "format": "email",
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    },
    "EmailNotification": {
      "properties": {
        "bcc": {
          "description": "The hidden recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "bodyHtml": {
          "description": "Leave empty to recieve \"text/plain\" email.\nThe template palceholders are allowed.\n",
          "type": "string"
        },
        "bodyText": {
          "description": "Leave empty to use text from \"bodyHtml\" without tags.\nThe template palceholders are allowed.\n",
          "type": "string"
        },
        "cc": {
          "description": "The recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "credentialHash": {
          "description": "SMTP Credential identifier string.",
          "type": "string"
        },
        "recipients": {
          "description": "The recipients addresses. The template palceholders are allowed.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "sender": {
          "description": "The sender address. The template palceholders are allowed.",
          "type": "string"
        },
        "subject": {
          "description": "The message subject. The template palceholders are allowed.",
          "type": "string"
        }
      },
      "required": [
        "credentialHash",
        "sender",
        "recipients",
        "subject",
        "bodyText",
        "bodyHtml"
      ],
      "type": "object"
    },
    "Error": {
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "maximum": 600,
          "minimum": 100,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EventType": {
      "description": "Rebilly event type",
      "enum": [
        "dispute-created",
        "gateway-account-requested",
        "transaction-processed",
        "subscription-canceled",
        "subscription-renewed",
        "payment-card-expired",
        "payment-declined",
        "transaction-process-requested",
        "risk-score-changed"
      ],
      "readOnly": true,
      "type": "string"
    },
    "File": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The upload date/time"
        },
        "description": {
          "description": "The File description",
          "type": "string"
        },
        "extension": {
          "description": "The File extension",
          "type": "string"
        },
        "height": {
          "description": "Image height, applicable to images only",
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "mime": {
          "description": "The mime type",
          "enum": [
            "image/png",
            "image/jpeg",
            "image/gif",
            "application/pdf",
            "audio/mpeg"
          ],
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Original File name",
          "type": "string"
        },
        "sha1": {
          "description": "Hash sum of the file",
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "description": "The File size in bytes",
          "readOnly": true,
          "type": "integer"
        },
        "tags": {
          "description": "The tags list",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The latest update date/time"
        },
        "url": {
          "description": "Write-only. If defined on POST, this would be used as a file source.",
          "type": "string"
        },
        "width": {
          "description": "Image width, applicable to images only",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FileLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "file"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Flexepin": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKey": {
                  "description": "Flexepin API Key",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "Flexepin API Secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Flexepin Gateway config"
    },
    "Forte": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountId": {
                  "description": "Forte Gateway account ID",
                  "type": "string"
                },
                "apiAccessId": {
                  "description": "Forte Gateway api access ID",
                  "format": "password",
                  "type": "string"
                },
                "apiSecretKey": {
                  "description": "Forte Gateway api secret key",
                  "format": "password",
                  "type": "string"
                },
                "locationId": {
                  "description": "Forte Gateway location ID",
                  "type": "string"
                }
              },
              "required": [
                "accountId",
                "locationId",
                "apiAccessId",
                "apiSecretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Forte Gateway config"
    },
    "FundSend": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "FundSend Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "FundSend Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "FundSend Gateway config"
    },
    "GatewayAccount": {
      "discriminator": "gatewayName",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/OnBoardingUrlLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acceptedCurrencies": {
          "description": "Accepted currencies (array of the currency three letter code)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "acquirerName": {
          "$ref": "#/definitions/AcquirerName"
        },
        "cityField": {
          "description": "The gateway account's city field (also known as line 2 descriptor)",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Gateway Account created time"
        },
        "dccMarkup": {
          "description": "Dynamic currency conversion markup in basis points",
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "descriptor": {
          "description": "The gateway account's descriptor",
          "type": "string"
        },
        "downtimeEnd": {
          "description": "Gateway account downtime end",
          "format": "date-time",
          "type": "string"
        },
        "downtimeStart": {
          "description": "Gateway account downtime start",
          "format": "date-time",
          "type": "string"
        },
        "dynamicDescriptor": {
          "description": "True, if Gateway Account allows dynamic descriptor",
          "type": "boolean"
        },
        "excludedDccQuoteCurrencies": {
          "description": "Excluded Dynamic Currency Conversion Quote Currencies",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gatewayName": {
          "$ref": "#/definitions/GatewayName"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The gateway identifier string",
          "readOnly": true
        },
        "merchantCategoryCode": {
          "description": "The gateway account's merchant category code",
          "maximum": 9950,
          "minimum": 742,
          "type": "integer"
        },
        "method": {
          "$ref": "#/definitions/Method",
          "description": "Payment Method"
        },
        "monthlyLimit": {
          "description": "Monthly Limit",
          "format": "double",
          "minimum": 0,
          "type": "integer"
        },
        "organizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Organization ID"
        },
        "paymentCardSchemes": {
          "description": "Accepted payment card brands",
          "items": {
            "enum": [
              "Visa",
              "MasterCard",
              "American Express",
              "Discover",
              "Maestro",
              "Solo",
              "Electron",
              "JCB",
              "Voyager",
              "Diners Club",
              "Switch",
              "Laser",
              "China Unionpay"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "description": "The gateway account's status",
          "enum": [
            "active",
            "inactive",
            "pending"
          ],
          "readOnly": true,
          "type": "string"
        },
        "threeDSecure": {
          "description": "True, if Gateway Account allows 3DSecure",
          "type": "boolean"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Gateway Account updated time"
        },
        "websites": {
          "description": "Websites IDs",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ],
            "description": "Website ID"
          },
          "type": "array"
        }
      },
      "required": [
        "gatewayName",
        "acquirerName",
        "merchantCategoryCode",
        "websites",
        "acceptedCurrencies",
        "organizationId"
      ],
      "type": "object"
    },
    "GatewayAccountLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "gatewayAccount"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "GatewayAccountPickInstruction": {
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "gateway-account-weights",
            "gateway-acquirer-weights"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "GatewayName": {
      "description": "The gateway name",
      "enum": [
        "A1Gateway",
        "AmexVPC",
        "AuthorizeNet",
        "Beanstream",
        "BraintreePayments",
        "Cashflows",
        "Cayan",
        "Chase",
        "ChinaUnionPay",
        "Credorax",
        "Datacash",
        "Dengi",
        "EMerchantPay",
        "Flexepin",
        "FundSend",
        "Forte",
        "GlobalCollect",
        "GlobalOne",
        "iCheque",
        "Ilixium",
        "JetPay",
        "Moneris",
        "NMI",
        "OchaPay",
        "Optimal",
        "PandaGateway",
        "Payeezy",
        "PayPal",
        "PayR",
        "Payvision",
        "Plugnpay",
        "Realex",
        "RealTime",
        "RebillyProcessor",
        "Redsys",
        "RPN",
        "Sagepay",
        "Stripe",
        "UPayCard",
        "USAePay",
        "VantivLitle",
        "vegaaH",
        "Walpay",
        "Wirecard",
        "Worldpay"
      ],
      "type": "string"
    },
    "GenericRestriction": {
      "description": "All restriction",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Restriction type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GlobalCollect": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKeyId": {
                  "description": "GlobalCollect Gateway api key ID",
                  "type": "string"
                },
                "apiSecretKey": {
                  "description": "GlobalCollect Gateway api secret key",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "GlobalCollect Gateway merchant ID",
                  "type": "string"
                },
                "skipFraudService": {
                  "description": "GlobalCollect skip fraud service",
                  "type": "boolean"
                }
              },
              "required": [
                "merchantId",
                "apiKeyId",
                "apiSecretKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "GlobalCollect Gateway config"
    },
    "GlobalOne": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "sharedSecret": {
                  "description": "GlobalOne Gateway shared secret",
                  "format": "password",
                  "type": "string"
                },
                "terminalId": {
                  "description": "GlobalOne Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "terminalId",
                "sharedSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "GlobalOne Gateway config"
    },
    "GlobalWebhook": {
      "properties": {
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List created time"
        },
        "credentialHash": {
          "description": "Hash from Credentials which is used for authentication by the given URL",
          "type": "string"
        },
        "eventsFilter": {
          "default": [],
          "description": "An array of System event type",
          "items": {
            "$ref": "#/definitions/GlobalWebhookEventType"
          },
          "type": "array"
        },
        "headers": {
          "description": "Map of elements with header name - header value association",
          "type": "object"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The webhook identifier string",
          "readOnly": true
        },
        "method": {
          "enum": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ],
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List updated time"
        },
        "url": {
          "description": "URL that will be triggered when the given event occurs.",
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "method",
        "url",
        "credentialHash"
      ],
      "type": "object"
    },
    "GlobalWebhookEventType": {
      "description": "Rebilly webhooks event type",
      "enum": [
        "gateway-account-requested",
        "subscription-trial-ended",
        "subscription-activated",
        "subscription-canceled",
        "subscription-renewed",
        "transaction-processed",
        "payment-card-expired",
        "payment-declined",
        "invoice-modified",
        "invoice-created",
        "dispute-created",
        "suspended-payment-completed"
      ],
      "type": "string"
    },
    "Ilixium": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountId": {
                  "description": "Ilixium Gateway account ID",
                  "type": "string"
                },
                "digestPassword": {
                  "description": "Ilixium Gateway digest password",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Ilixium Gateway merchant ID",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "accountId",
                "digestPassword"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Ilixium Gateway config"
    },
    "InvalidError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "properties": {
            "details": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ]
    },
    "Invoice": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            },
            {
              "$ref": "#/definitions/DeliveryContactLink"
            },
            {
              "$ref": "#/definitions/OrganizationLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "maxItems": 6,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "abandonedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice abandoned time"
        },
        "amount": {
          "description": "The Invoice's amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Invoice's billing contact ID"
        },
        "closedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice closed time"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice created time"
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer's ID"
        },
        "deliveryContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Invoice's delivery contact ID"
        },
        "discounts": {
          "description": "Discounts applied",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceDiscount"
              }
            ]
          },
          "type": "array"
        },
        "dueTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice due time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The invoice identifier string",
          "readOnly": true
        },
        "issuedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice issued time"
        },
        "items": {
          "description": "Invoice items array",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "notes": {
          "description": "Notes for the customer which will display on the invoice",
          "type": "string"
        },
        "organizationId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The organization's ID",
          "readOnly": true
        },
        "voidedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Invoice voided time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website's ID"
        }
      },
      "required": [
        "customerId",
        "websiteId",
        "currency"
      ],
      "type": "object"
    },
    "InvoiceDiscount": {
      "properties": {
        "amount": {
          "description": "Total amount that was discounted by this Coupon",
          "format": "double",
          "type": "number"
        },
        "description": {
          "description": "Discount description",
          "type": "string"
        },
        "redemptionCode": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Coupon's redemption code"
        },
        "redemptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Redemption ID"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "InvoiceIssue": {
      "properties": {
        "issuedTime": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceItem": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/SubscriptionLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "description": "Invoice item's description",
          "type": "string"
        },
        "discountAmount": {
          "description": "Invoice item discount amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string",
          "readOnly": true
        },
        "periodEndTime": {
          "description": "End time",
          "format": "date-time",
          "type": "string"
        },
        "periodStartTime": {
          "description": "Start time",
          "format": "date-time",
          "type": "string"
        },
        "productId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The product's ID"
        },
        "quantity": {
          "description": "Invoice item's quantity",
          "type": "integer"
        },
        "type": {
          "description": "Invoice item's type",
          "enum": [
            "debit",
            "credit"
          ],
          "type": "string"
        },
        "unitPrice": {
          "description": "Invoice item's price",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "type",
        "unitPrice"
      ],
      "type": "object"
    },
    "ItemsLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "items"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "JetPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "TerminalID": {
                  "description": "JetPay Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "TerminalID"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "JetPay Gateway config"
    },
    "Layout": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/ItemsLink"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Layout created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The layout identifier string",
          "readOnly": true
        },
        "items": {
          "description": "The array of layout items (planId and starred)",
          "items": {
            "$ref": "#/definitions/LayoutItem"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the layout string",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "LayoutItem": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "order": {
          "description": "Item's order in Layout",
          "readOnly": true,
          "type": "integer"
        },
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The plan identifier string"
        },
        "starred": {
          "description": "Boolean if the plan should be starred (special callout presentation)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LeadSource": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "affiliate": {
          "description": "Lead Source's affiliate (eg 123, Bob Smith)",
          "type": "string"
        },
        "amount": {
          "description": "The amount that the lead cost",
          "format": "double",
          "type": "number"
        },
        "campaign": {
          "description": "Lead Source's campaign (eg go-big-123)",
          "type": "string"
        },
        "clickId": {
          "description": "Lead Source's click id (may come from an ad server)",
          "type": "string"
        },
        "content": {
          "description": "Lead Source's content (eg smiley faces)",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "LeadSource created time"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 alpha code) (eg USD, EUR)",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The lead source identifier string",
          "readOnly": true
        },
        "ipAddress": {
          "description": "Customer's IP Address",
          "type": "string"
        },
        "medium": {
          "description": "Lead Source's medium (eg search, display)",
          "type": "string"
        },
        "path": {
          "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
          "type": "string"
        },
        "salesAgent": {
          "description": "Lead Source's sales agent (eg James Bond)",
          "type": "string"
        },
        "source": {
          "description": "Lead Source's source (eg google, yahoo)",
          "type": "string"
        },
        "subAffiliate": {
          "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
          "type": "string"
        },
        "term": {
          "description": "Lead Source's term (eg salt shakers)",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "LeadSource updated time"
        }
      },
      "type": "object"
    },
    "LeadSourceLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "leadSource"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "List": {
      "properties": {
        "_links": {
          "description": "Links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "List ID",
          "readOnly": true
        },
        "name": {
          "description": "List name",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "List updated time"
        },
        "values": {
          "description": "List values",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "List version",
          "minimum": 1,
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "values"
      ],
      "type": "object"
    },
    "Method": {
      "description": "The payment method",
      "enum": [
        "ach",
        "Alipay",
        "cash",
        "china-unionpay",
        "payment-card",
        "paypal",
        "OchaPay",
        "UPayCard",
        "WeChat Pay",
        "Flexepin"
      ],
      "type": "string"
    },
    "Moneris": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiToken": {
                  "description": "Moneris Gateway api token",
                  "format": "password",
                  "type": "string"
                },
                "storeId": {
                  "description": "Moneris Gateway store ID",
                  "type": "string"
                }
              },
              "required": [
                "storeId",
                "apiToken"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Moneris Gateway config"
    },
    "Mpi": {
      "discriminator": "name",
      "properties": {
        "name": {
          "$ref": "#/definitions/MpiName"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "MpiName": {
      "description": "The Merchant plug-in Name",
      "enum": [
        "PayvisionMpi",
        "WirecardMpi",
        "IlixiumMpi",
        "DataCashMpi",
        "OptimalMpi",
        "GlobalCollectMpi",
        "CardinalCommerce",
        "Other"
      ],
      "type": "string"
    },
    "NMI": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "password": {
                  "description": "NMI Gateway store ID",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "NMI Gateway api token",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "NMI Gateway config"
    },
    "NewLink": {
      "properties": {
        "href": {
          "description": "The link URL",
          "type": "string"
        }
      },
      "required": [
        "href"
      ],
      "type": "object"
    },
    "Note": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "archived": {
          "description": "Is the note archived (excluded from List method)",
          "type": "boolean"
        },
        "archivedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Note archived time"
        },
        "content": {
          "description": "The note's name",
          "type": "string"
        },
        "createdBy": {
          "description": "The note's creator",
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Note created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The note identifier string",
          "readOnly": true
        },
        "relatedId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The note's related resource ID"
        },
        "relatedType": {
          "description": "The note's related resource type",
          "enum": [
            "customer",
            "payment-card",
            "payment-gateway",
            "subscription",
            "transaction"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Note updated time"
        }
      },
      "required": [
        "content",
        "relatedType",
        "relatedId"
      ],
      "type": "object"
    },
    "NotesLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "notes"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "OchaPay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiPassword": {
                  "description": "OchaPay Gateway api password",
                  "format": "password",
                  "type": "string"
                },
                "apiUsername": {
                  "description": "OchaPay Gateway username",
                  "type": "string"
                },
                "secretWord": {
                  "description": "OchaPay Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "apiUsername",
                "apiPassword",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "OchaPay Gateway config"
    },
    "OnBoardingUrlLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "onBoardingUrl"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "OnOff": {
      "default": "active",
      "enum": [
        "active",
        "inactive"
      ],
      "type": "string"
    },
    "Optimal": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "accountNum": {
                  "description": "Optimal Gateway account number",
                  "type": "string"
                },
                "storeId": {
                  "description": "Optimal Gateway store ID",
                  "type": "string"
                },
                "storePwd": {
                  "description": "Optimal Gateway store password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "storeId",
                "storePwd",
                "accountNum"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Optimal Gateway config"
    },
    "Organization": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "The organization street address",
          "maxLength": 60,
          "type": "string"
        },
        "address2": {
          "description": "The organization street address",
          "maxLength": 60,
          "type": "string"
        },
        "city": {
          "description": "The organization city",
          "maxLength": 45,
          "type": "string"
        },
        "country": {
          "description": "The organization country ISO Alpha-2 code",
          "pattern": "^[A-Z]{2}$",
          "type": "string"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp",
          "description": "The organization created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The organization identifier string",
          "readOnly": true
        },
        "name": {
          "description": "The organization name",
          "maxLength": 60,
          "type": "string"
        },
        "postalCode": {
          "description": "The organization postal code",
          "maxLength": 10,
          "type": "string"
        },
        "region": {
          "description": "The organization region (state)",
          "maxLength": 45,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The organization updated time"
        }
      },
      "required": [
        "name",
        "country"
      ],
      "type": "object"
    },
    "OrganizationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "organization"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Other": {
      "allOf": [
        {
          "$ref": "#/definitions/Mpi"
        }
      ],
      "description": "Other"
    },
    "PandaGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiCode": {
                  "description": "Panda Gateway api code",
                  "type": "string"
                },
                "merchantCode": {
                  "description": "Panda Gateway merchant code",
                  "type": "string"
                },
                "signKey": {
                  "description": "Panda Gateway sign key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "apiCode",
                "signKey"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Panda Gateway config"
    },
    "ParentTransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "parentTransaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "PayPal": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantIdInPayPal": {
                  "description": "PayPal Gateway merchant id",
                  "type": "string"
                },
                "redirectUrl": {
                  "description": "PayPal Gateway redirect url",
                  "format": "url",
                  "type": "string"
                }
              },
              "required": [
                "merchantIdInPayPal",
                "redirectUrl"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "PayPal Gateway config"
    },
    "PayR": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "PayR Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "PayR Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "PayR Gateway config"
    },
    "Payeezy": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "apiKey": {
                  "description": "API Key",
                  "type": "string"
                },
                "apiSecret": {
                  "description": "API Secret",
                  "format": "password",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Payeezy Merchant ID",
                  "type": "string"
                },
                "merchantToken": {
                  "description": "Merchant Token",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "merchantToken",
                "apiKey",
                "apiSecret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Payeezy Gateway config"
    },
    "Payment": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/TransactionLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "maxItems": 4,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "description": "The payment amount",
          "format": "double",
          "type": "integer"
        },
        "billingContactId": {
          "description": "Billing Contact ID",
          "type": "string"
        },
        "createdBy": {
          "description": "The process that created this payment",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Payment created time"
        },
        "currency": {
          "description": "The payment currency ISO Alpha code",
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The customer identifier string"
        },
        "description": {
          "description": "The payment description",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The payment identifier string",
          "readOnly": true
        },
        "invoiceIds": {
          "description": "The array of invoice identifiers",
          "items": {
            "$ref": "#/definitions/ResourceId"
          },
          "type": "array"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "result": {
          "description": "Payment result",
          "enum": [
            "approved",
            "declined",
            "canceled",
            "unknown"
          ],
          "readOnly": true,
          "type": "string"
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "description": "The position in the sequence of retries",
          "readOnly": true,
          "type": "integer"
        },
        "scheduledTime": {
          "description": "The time the payment is scheduled for collection",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Payment status",
          "enum": [
            "scheduled",
            "queued",
            "in-progress",
            "incomplete",
            "waiting-gateway",
            "suspended",
            "completed"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedBy": {
          "description": "The process that updated this payment",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Payment updated time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string"
        }
      },
      "required": [
        "websiteId",
        "customerId",
        "currency",
        "amount"
      ],
      "type": "object"
    },
    "PaymentCard": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            }
          ],
          "maxItems": 3,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "bankCountry": {
          "description": "Payment Card bank country",
          "readOnly": true,
          "type": "string"
        },
        "bankName": {
          "description": "Payment Card bank name",
          "readOnly": true,
          "type": "string"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Billing Contact ID. Required if card is creating not from Token"
        },
        "bin": {
          "description": "The card's bin (the PAN's first 6 digits)",
          "format": "bin",
          "readOnly": true,
          "type": "string"
        },
        "brand": {
          "description": "Payment Card brand",
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Discover",
            "Maestro",
            "Solo",
            "Electron",
            "JCB",
            "Voyager",
            "Diners Club",
            "Switch",
            "Laser",
            "China UnionPay"
          ],
          "readOnly": true,
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Card created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Customer's ID. Required if card is creating not from Token"
        },
        "cvv": {
          "description": "Card's cvv (card verification value). Required if card is creating not from Token",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month. Required if card is creating not from Token",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year. Required if card is creating not from Token",
          "type": "integer"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The card identifier string",
          "readOnly": true
        },
        "last4": {
          "description": "The PAN's last 4 digits",
          "readOnly": true,
          "type": "string"
        },
        "pan": {
          "description": "The card PAN (Primary Account Number). Required if card is creating not from Token",
          "type": "string"
        },
        "safeHash": {
          "description": "The card's hash. Based on bin and last 4 digits of the PAN",
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "description": "Payment Card status",
          "enum": [
            "active",
            "expired",
            "inactive",
            "deactivated",
            "pending"
          ],
          "readOnly": true,
          "type": "string"
        },
        "token": {
          "description": "PaymentCardToken. Use without any other fields",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Card updated time"
        }
      },
      "type": "object"
    },
    "PaymentCardLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "paymentCard"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "PaymentCardMigrationRequest": {
      "properties": {
        "fromGatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "An ID of Gateway Account cards should be migrated from"
        },
        "paymentCardIds": {
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ],
            "description": "An array of payment card IDs"
          },
          "minItems": 1,
          "type": "array"
        },
        "toGatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "An ID of Gateway Account cards should be migrated to"
        }
      },
      "required": [
        "fromGatewayAccountId",
        "toGatewayAccountId",
        "paymentCardIds"
      ],
      "type": "object"
    },
    "PaymentCardMigrationResponse": {
      "properties": {
        "migratedCards": {
          "description": "Amount of cards that were successfully migrated",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PaymentInstrument": {
      "discriminator": "method",
      "properties": {
        "method": {
          "$ref": "#/definitions/Method"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "PaymentLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "payment"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "PaymentRetry": {
      "properties": {
        "afterAttemptPolicy": {
          "description": "The policy on the attempt finishes",
          "enum": [
            "none",
            "change-subscription-renewal-time"
          ],
          "type": "string"
        },
        "afterRetryEndPolicy": {
          "description": "The policy on the retry ends",
          "enum": [
            "none",
            "cancel-subscription"
          ],
          "type": "string"
        },
        "attempts": {
          "items": {
            "properties": {
              "paymentInstruction": {
                "$ref": "#/definitions/AmountAdjustment"
              },
              "scheduleInstruction": {
                "$ref": "#/definitions/ScheduleMethod"
              }
            },
            "required": [
              "scheduleInstruction",
              "paymentInstruction"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "attempts",
        "afterAttemptPolicy",
        "afterRetryEndPolicy"
      ],
      "type": "object"
    },
    "PaymentToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "address": {
          "description": "Customer's billing address 1",
          "type": "string"
        },
        "address2": {
          "description": "Customer's billing address 2",
          "type": "string"
        },
        "city": {
          "description": "Billing address city",
          "type": "string"
        },
        "country": {
          "description": "Billing country - Two letter code",
          "type": "string"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "firstName": {
          "description": "First name on payment card",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The token identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "Last name on payment card",
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/Method",
          "description": "Payment Method"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentTokenInstrument"
        },
        "phoneNumber": {
          "description": "Phone number",
          "type": "string"
        },
        "postalCode": {
          "description": "Billing postal code",
          "type": "string"
        },
        "region": {
          "description": "Billing region",
          "type": "string"
        }
      },
      "required": [
        "method",
        "paymentInstrument",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "PaymentTokenInstrument": {
      "description": "Payment Token instrument object",
      "properties": {
        "accountNumber": {
          "description": "AccountNumber",
          "type": "integer"
        },
        "accountType": {
          "description": "Account Type",
          "type": "string"
        },
        "bankName": {
          "description": "Bank name",
          "type": "string"
        },
        "cvv": {
          "description": "The CVV/CVC of the payment card",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year",
          "type": "integer"
        },
        "pan": {
          "description": "The card PAN (Primary Account Number)",
          "type": "string"
        },
        "routingNumber": {
          "description": "Routing Number",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Payvision": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "avs": {
                  "description": "Payvision Gateway avs",
                  "type": "boolean"
                },
                "delay": {
                  "description": "Payvision Gateway delay",
                  "type": "integer"
                },
                "memberGuid": {
                  "description": "Payvision Gateway member guid",
                  "format": "password",
                  "type": "string"
                },
                "memberId": {
                  "description": "Payvision Gateway member id",
                  "type": "string"
                }
              },
              "required": [
                "memberId",
                "avs",
                "delay",
                "memberGuid"
              ],
              "type": "object"
            },
            "mpi": {
              "$ref": "#/definitions/Mpi"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Payvision Gateway config"
    },
    "PayvisionMpi": {
      "allOf": [
        {
          "$ref": "#/definitions/Mpi"
        }
      ],
      "description": "Payvision Integrated"
    },
    "Plan": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "contractTermLength": {
          "description": "The length that corresponds with the contractTermUnit",
          "type": "integer"
        },
        "contractTermUnit": {
          "description": "The unit of time",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Plan created time"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "currencySign": {
          "description": "Currency sign",
          "type": "string"
        },
        "description": {
          "description": "The plan description",
          "type": "string"
        },
        "expiredTime": {
          "description": "Time when the plan is not longer valid",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string",
          "readOnly": true
        },
        "isActive": {
          "description": "If the plan is not active, customers cannot subscribe to the plan (default to true)",
          "type": "boolean"
        },
        "maxQuantity": {
          "description": "Maximum quantity per order (NULL if no maximum)",
          "type": "integer"
        },
        "minQuantity": {
          "description": "Minimum quantity per order, defaults to 1",
          "type": "integer"
        },
        "name": {
          "description": "The plan name",
          "type": "string"
        },
        "recurringAmount": {
          "description": "The amount that recurs according to the schedule",
          "format": "double",
          "type": "number"
        },
        "recurringPeriodLength": {
          "description": "The length of time (used with the recurringPeriodUnit)",
          "type": "integer"
        },
        "recurringPeriodLimit": {
          "description": "The number of times a subscription will rebill until the contract is over",
          "type": "integer"
        },
        "recurringPeriodUnit": {
          "description": "The unit of time",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        },
        "richDescription": {
          "description": "The plan rich description - supports HTML",
          "type": "string"
        },
        "setupAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "format": "double",
          "type": "number"
        },
        "trialAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "format": "double",
          "type": "number"
        },
        "trialPeriodLength": {
          "description": "The length of time (used with the trialPeriodUnit)",
          "type": "integer"
        },
        "trialPeriodUnit": {
          "description": "The unit of time",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Plan updated time"
        }
      },
      "required": [
        "name",
        "currency"
      ],
      "type": "object"
    },
    "PlanLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "plan"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Plugnpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "publisher-name": {
                  "description": "Plugnpay Gateway member id",
                  "type": "string"
                },
                "publisher-password": {
                  "description": "Plugnpay Gateway avs",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "publisher-name",
                "publisher-password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Plugnpay Gateway config"
    },
    "PriceBasedShippingRate": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "maxOrderSubtotal": {
          "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
          "format": "double",
          "type": "number"
        },
        "minOrderSubtotal": {
          "default": 0,
          "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
          "format": "double",
          "type": "number"
        },
        "name": {
          "description": "The shipping rate name",
          "maxLength": 255,
          "type": "string"
        },
        "price": {
          "description": "The shipping price - 0 is a valid value (for free)",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "name",
        "currency",
        "price"
      ],
      "type": "object"
    },
    "Product": {
      "description": "Your product includes digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.\n",
      "example": "{\n  \"id\": \"stringid\",\n  \"name\": \"Widget\",\n  \"description\": \"Fantastic widget\",\n  \"taxCategoryId\": null,\n  \"requiresShipping\": true,\n  \"accountingCode\": \"100\",\n  \"customFields\": [],\n  \"createdTime\": \"2015-08-27 13:45:12\",\n  \"updatedTime\": \"2015-08-27 13:45:12\",\n  \"_links\": [\n      {\n        \"rel\": \"self\",\n        \"href\": \"https://api.rebilly.com/v2.1/products/stringid\"\n      }\n  ]\n}\n",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "accountingCode": {
          "description": "The product accounting code",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The product created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "description": {
          "description": "The product description",
          "maxLength": 512,
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The product identifier string",
          "readOnly": true
        },
        "name": {
          "description": "The product name",
          "maxLength": 255,
          "type": "string"
        },
        "requiresShipping": {
          "description": "If the product requires shipping, shipping calculations will be applied",
          "type": "boolean"
        },
        "taxCategoryId": {
          "description": "The product's tax category identifier string",
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ],
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The product updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "RPN": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "key": {
                  "description": "RPN Key",
                  "format": "password",
                  "type": "string"
                },
                "mid": {
                  "description": "RPN MID",
                  "type": "string"
                }
              },
              "required": [
                "mid",
                "key"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "RPN Gateway config"
    },
    "RealTime": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "RealTime Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "RealTime Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "RealTime Gateway config"
    },
    "Realex": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "account": {
                  "description": "Realex Gateway account",
                  "type": "string"
                },
                "merchantId": {
                  "description": "Realex Gateway merchant id",
                  "type": "string"
                },
                "rebatePassword": {
                  "description": "Realex Gateway rebate password",
                  "format": "password",
                  "type": "string"
                },
                "secretKey": {
                  "description": "Realex Gateway secret key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantId",
                "secretKey",
                "rebatePassword",
                "account"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Realex Gateway config"
    },
    "RebillyProcessor": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        }
      ],
      "description": "RebillyProcessor Gateway config"
    },
    "RedemptionRestriction": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "type": {
              "description": "Redemption's additional restriction type",
              "enum": [
                "discounts-per-redemption",
                "restrict-to-invoices",
                "restrict-to-plans",
                "restrict-to-subscriptions",
                "minimum-order-amount"
              ],
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Redemption restrictions",
      "type": "object"
    },
    "Redsys": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantCode": {
                  "description": "Redsys Gateway merchant code",
                  "format": "password",
                  "type": "string"
                },
                "secretCode": {
                  "description": "Redsys Gateway secret code",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "secretCode"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Redsys Gateway config"
    },
    "ResetPassword": {
      "properties": {
        "newPassword": {
          "description": "New password",
          "format": "password",
          "type": "string"
        }
      },
      "required": [
        "newPassword"
      ],
      "type": "object"
    },
    "ResetPasswordToken": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "credential": {
          "description": "Token's credential ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "Password expired time",
          "format": "date-time",
          "type": "string"
        },
        "password": {
          "description": "Token's password (only for POST)",
          "format": "password",
          "type": "string"
        },
        "token": {
          "description": "The token's identifier string",
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "ResourceCustomFields": {
      "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
      "type": "object"
    },
    "ResourceId": {
      "description": "The resource ID. Defaults to UUID v4",
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
      "maxLength": 50,
      "type": "string"
    },
    "Rule": {
      "description": "The rule",
      "properties": {
        "actions": {
          "items": {
            "$ref": "#/definitions/RuleAction"
          },
          "type": "array",
          "uniqueItems": true
        },
        "criteria": {
          "$ref": "#/definitions/Condition"
        },
        "final": {
          "default": true,
          "description": "Whether rule is final, meaning stop further matching rules if this is matched",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        }
      },
      "required": [
        "name",
        "actions"
      ],
      "type": "object"
    },
    "RuleAction": {
      "discriminator": "name",
      "properties": {
        "name": {
          "description": "The action name",
          "enum": [
            "blacklist",
            "cancel-scheduled-payments",
            "guess-payment-card-expiration",
            "pick-gateway-account",
            "schedule-payment-retry",
            "schedule-payment",
            "send-email",
            "trigger-webhook",
            "stop-subscriptions",
            "add-risk-score"
          ],
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "RuleSet": {
      "description": "Set of rules for particular event",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/Rule"
          },
          "type": "array"
        },
        "updatedTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "version": {
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "RuleSetHistoryItem": {
      "description": "Version of rules",
      "properties": {
        "_links": {
          "description": "The links related to a resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/RuleSetVersionLink"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "version": {
          "type": "integer"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "RuleSetVersion": {
      "description": "Version of rules",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        },
        "rules": {
          "items": {
            "$ref": "#/definitions/Rule"
          },
          "type": "array"
        },
        "version": {
          "type": "integer"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "RuleSetVersionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "rules"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "Sagepay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "M_ID": {
                  "description": "Sagepay Gateway merchant ID",
                  "type": "string"
                },
                "M_KEY": {
                  "description": "Sagepay Gateway merchant key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "M_ID",
                "M_KEY"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Sagepay Gateway config"
    },
    "ScheduleMethod": {
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "enum": [
            "auto",
            "immediately",
            "date-interval",
            "day-of-month",
            "day-of-week"
          ],
          "type": "string"
        }
      },
      "required": [
        "method"
      ],
      "type": "object"
    },
    "SelfLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "self"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "SendPreviewWebhook": {
      "allOf": [
        {
          "$ref": "#/definitions/Webhook"
        }
      ],
      "description": "Trigger a test webhook"
    },
    "SendTestEmail": {
      "allOf": [
        {
          "$ref": "#/definitions/EmailNotification"
        }
      ],
      "description": "Send a test email"
    },
    "ServerTimestamp": {
      "description": "Read-only timestamp, automatically assigned on back-end.",
      "format": "date-time",
      "readOnly": true,
      "type": "string"
    },
    "Session": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Session created time"
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The session identifier string",
          "readOnly": true
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ],
          "description": "The session's permissions. See the format in example"
        },
        "token": {
          "description": "The session's token used for authentication",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Session updated time"
        },
        "userId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The user identifier string",
          "readOnly": true
        }
      },
      "required": [
        "permissions"
      ],
      "type": "object"
    },
    "ShippingZone": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "countries": {
          "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
          "items": {
            "description": "Country ISO Alpha-2 code",
            "pattern": "^[A-Z]{2}$",
            "type": "string"
          },
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The shipping zone created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The shipping zone identifier string",
          "readOnly": true
        },
        "isDefault": {
          "description": "Is this Shipping Zone default",
          "readOnly": true
        },
        "name": {
          "description": "The shipping zone name",
          "maxLength": 255,
          "type": "string"
        },
        "rates": {
          "description": "Price-based shipping rate instructions",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/PriceBasedShippingRate"
              }
            ],
            "description": "Price based shipping rate instruction"
          },
          "type": "array"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The shipping zone updated time"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Signin": {
      "properties": {
        "email": {
          "description": "Email",
          "type": "string"
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "format": "date-time",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "format": "password",
          "type": "string"
        }
      },
      "required": [
        "email",
        "password"
      ],
      "type": "object"
    },
    "Signup": {
      "properties": {
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "company": {
          "description": "The user's company name",
          "type": "string"
        },
        "currencies": {
          "default": [
            "USD"
          ],
          "description": "An array of currencies codes",
          "items": {
            "description": "3 letters ISO 4217 currency code",
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "description": "The user email",
          "format": "email",
          "maxLength": 100,
          "type": "string"
        },
        "firstName": {
          "description": "The user first name",
          "type": "string"
        },
        "lastName": {
          "description": "The user last name",
          "type": "string"
        },
        "merchantCategoryCode": {
          "default": 5734,
          "description": "Merchant category code. Defaults to \"Computer Software Stores\"",
          "type": "integer"
        },
        "password": {
          "description": "The user password",
          "format": "password",
          "type": "string"
        },
        "website": {
          "description": "The user's website address",
          "type": "string"
        }
      },
      "required": [
        "email",
        "company",
        "firstName",
        "lastName",
        "businessPhone",
        "password",
        "website"
      ],
      "type": "object"
    },
    "SmtpAuthorization": {
      "discriminator": "type",
      "properties": {
        "type": {
          "default": "none",
          "enum": [
            "none",
            "plain",
            "login",
            "cram-md5"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "SmtpCredential": {
      "description": "SMTP Credential",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "auth": {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        "encryption": {
          "default": "none",
          "description": "The encryption value",
          "enum": [
            "none",
            "tls",
            "ssl"
          ],
          "type": "string"
        },
        "hash": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "host": {
          "description": "The host name",
          "type": "string"
        },
        "port": {
          "default": 25,
          "description": "The port value",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "host"
      ],
      "type": "object"
    },
    "Status": {
      "properties": {
        "status": {
          "description": "The API status. If everything is ok - value is 'ok'",
          "enum": [
            "ok"
          ],
          "readOnly": true,
          "type": "string"
        },
        "time": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Current time"
        }
      },
      "type": "object"
    },
    "Stripe": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "redirectUrl": {
                  "description": "Stripe Gateway redirect url",
                  "format": "url",
                  "type": "string"
                }
              },
              "required": [
                "redirectUrl"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Stripe Gateway config"
    },
    "Subscription": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/PlanLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            },
            {
              "$ref": "#/definitions/DeliveryContactLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ],
          "maxItems": 6,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "activationTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription activation time"
        },
        "autopay": {
          "default": true,
          "description": "Autopay determines if a payment attempt will be automatic",
          "type": "boolean"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each billing contact"
        },
        "cancelCategory": {
          "description": "Cancel category",
          "enum": [
            "billing-failure",
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "never-started",
            "switched-plan",
            "other"
          ],
          "readOnly": true,
          "type": "string"
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "canceledBy": {
          "description": "Canceled by",
          "enum": [
            "merchant",
            "customer",
            "rebilly"
          ],
          "readOnly": true,
          "type": "string"
        },
        "canceledTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription canceled time"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each customer"
        },
        "deliveryContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each delivery contact"
        },
        "endTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription end time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The Subscription identifier string",
          "readOnly": true
        },
        "inTrial": {
          "description": "True if the subscription is currently in a trial period",
          "readOnly": true,
          "type": "boolean"
        },
        "initialInvoiceId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for the initial invoice"
        },
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each plan"
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        },
        "rebillNumber": {
          "description": "The current period number",
          "readOnly": true,
          "type": "integer"
        },
        "renewalTime": {
          "description": "Subscription renewal time",
          "format": "date-time",
          "type": "string"
        },
        "startTime": {
          "description": "Subscription start time",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Subscription status",
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Subscription updated time"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Unique id for each website"
        }
      },
      "required": [
        "customerId",
        "planId",
        "websiteId"
      ],
      "type": "object"
    },
    "SubscriptionCancel": {
      "properties": {
        "cancelCategory": {
          "description": "Cancel category",
          "enum": [
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "other"
          ],
          "type": "string"
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "maxLength": 255,
          "type": "string"
        },
        "canceledBy": {
          "description": "Canceled by",
          "enum": [
            "merchant",
            "customer"
          ],
          "type": "string"
        },
        "policy": {
          "description": "Cancel policy",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ],
          "type": "string"
        }
      },
      "required": [
        "policy",
        "canceledBy",
        "cancelCategory"
      ],
      "type": "object"
    },
    "SubscriptionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "subscription"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "SubscriptionSwitch": {
      "properties": {
        "planId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The plan identifier string"
        },
        "policy": {
          "description": "Switch policy",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ],
          "type": "string"
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website's ID"
        }
      },
      "required": [
        "planId",
        "policy"
      ],
      "type": "object"
    },
    "SubscriptionTracking": {
      "description": "Tracking subscription log",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log created time"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "invoiceItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "message": {
          "description": "It contains the transaction number and renewal time",
          "type": "string"
        },
        "result": {
          "description": "Subscription's result",
          "enum": [
            "created",
            "postponed",
            "stopped",
            "error"
          ],
          "type": "string"
        },
        "subscriptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "SystemEvent": {
      "description": "The application event",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "eventType": {
          "$ref": "#/definitions/EventType"
        },
        "rulesCount": {
          "readOnly": true,
          "type": "integer"
        },
        "title": {
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TaxCategory": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "description": "The tax category description",
          "maxLength": 512,
          "type": "string"
        },
        "id": {
          "description": "The tax category identifier string",
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ],
          "maxLength": 50,
          "readOnly": true,
          "type": "string"
        },
        "taxProvider": {
          "description": "The tax category maps to a provider",
          "enum": [
            "tax-jar"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ThreeDSecure": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "description": "Transaction amount",
          "format": "double",
          "type": "number"
        },
        "cavv": {
          "description": "The 3D Secure entry cardholder authentication verification value",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The 3D Secure entry created time"
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related customer ID"
        },
        "eci": {
          "description": "The 3D Secure entry electronic commerce indicator",
          "type": "integer"
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3DSecure",
          "enum": [
            "Y",
            "N",
            "U"
          ],
          "type": "string"
        },
        "enrollmentEci": {
          "description": "The 3D Secure entry enrollment eci",
          "type": "string"
        },
        "gatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related gateway account ID"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The 3D Secure entry identifier string",
          "readOnly": true
        },
        "payerAuthResponseStatus": {
          "description": "The 3D Secure entry Auth Response Status",
          "enum": [
            "Y",
            "N",
            "U",
            "A"
          ],
          "type": "string"
        },
        "paymentCardId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related payment card ID"
        },
        "signatureVerification": {
          "description": "If signature was verified",
          "enum": [
            "Y",
            "N"
          ],
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Related Website ID"
        },
        "xid": {
          "description": "The 3D Secure entry transaction Id",
          "type": "string"
        }
      },
      "required": [
        "enrolled",
        "enrollmentEci",
        "customerId",
        "gatewayAccountId",
        "paymentCardId",
        "websiteId",
        "currency",
        "amount"
      ],
      "type": "object"
    },
    "ThreeDSecureResult": {
      "properties": {
        "authenticated": {
          "description": "The 3D Secure entry Auth Response Status",
          "enum": [
            "yes",
            "no",
            "not applicable",
            "attempted"
          ],
          "type": "string"
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3D Secure",
          "enum": [
            "yes",
            "no",
            "invalid card/timeout",
            "unavailable"
          ],
          "type": "string"
        },
        "liability": {
          "enum": [
            "protected",
            "not protected",
            "protected (attempt)"
          ],
          "type": "string"
        }
      },
      "readOnly": true,
      "required": [
        "enrolled",
        "authenticated",
        "liability"
      ],
      "type": "object"
    },
    "Time": {
      "format": "date-time",
      "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z(\\+|\\-)([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])?$",
      "type": "string"
    },
    "TimeUnit": {
      "enum": [
        "second",
        "seconds",
        "minute",
        "minutes",
        "hour",
        "hours",
        "day",
        "days",
        "month",
        "months",
        "year",
        "years"
      ],
      "type": "string"
    },
    "Transaction": {
      "properties": {
        "3ds": {
          "allOf": [
            {
              "$ref": "#/definitions/ThreeDSecureResult"
            }
          ]
        },
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/GatewayAccountLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/PaymentCardLink"
            },
            {
              "$ref": "#/definitions/PaymentLink"
            },
            {
              "$ref": "#/definitions/ParentTransactionLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            }
          ],
          "maxItems": 6,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "acquirerName": {
          "description": "Acquirer name, available only when transaction use gateway, else null",
          "readOnly": true,
          "type": "string"
        },
        "amount": {
          "description": "The transactions's amount",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "billingContactId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Billing Contact ID"
        },
        "bin": {
          "description": "Payment Card BIN",
          "format": "bin",
          "readOnly": true,
          "type": "string"
        },
        "childTransactions": {
          "description": "The child transaction IDs",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction created time"
        },
        "currency": {
          "description": "The transactions's currency",
          "readOnly": true,
          "type": "string"
        },
        "customerId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Customer's ID",
          "readOnly": true
        },
        "dcc": {
          "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false",
          "properties": {
            "base": {
              "description": "Initial amount and currency to convert from",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "outcome": {
              "description": "Dynamic Currency Conversion outcome",
              "enum": [
                "rejected",
                "selected",
                "unknown"
              ],
              "type": "string"
            },
            "quote": {
              "description": "Suggested amount and currency to convert to",
              "properties": {
                "amount": {
                  "format": "double",
                  "type": "number"
                },
                "currency": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "usdMarkup": {
              "description": "The amount of markup translated to USD",
              "format": "double",
              "type": "number"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "gateway": {
          "description": "The related gateway information",
          "properties": {
            "avsResponse": {
              "description": "The AVS gateway's response",
              "properties": {
                "code": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "message": {
                  "description": "The raw response message",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "cvvResponse": {
              "description": "The CVV gateway's response",
              "properties": {
                "code": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "message": {
                  "description": "The raw response message",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "response": {
              "description": "The gateway's response",
              "properties": {
                "code": {
                  "description": "The gateway's response code",
                  "type": "string"
                },
                "message": {
                  "description": "The gateway's response message",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw, unmapped gateway's response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw, unmapped gateway's response message",
                  "type": "string"
                },
                "type": {
                  "description": "The gateway's response type",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "readOnly": true,
          "type": "object"
        },
        "gatewayAccountId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transactions's Gateway Account ID",
          "readOnly": true
        },
        "gatewayName": {
          "description": "Payment Gateway name, available only when transaction use gateway, else null",
          "readOnly": true,
          "type": "string"
        },
        "gatewayTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The gateway's transaction ID",
          "readOnly": true
        },
        "has3ds": {
          "readOnly": true,
          "type": "boolean"
        },
        "hasDcc": {
          "description": "True if transaction has Dynamic Currency Conversion applied",
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transaction identifier string",
          "readOnly": true
        },
        "invoiceIds": {
          "description": "The invoice IDs related to transaction",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true,
          "type": "array"
        },
        "method": {
          "$ref": "#/definitions/Method",
          "description": "Payment Method"
        },
        "parentTransactionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The transactions's parent ID",
          "readOnly": true
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "rebillNumber": {
          "description": "The transactions's rebill number",
          "readOnly": true,
          "type": "integer"
        },
        "result": {
          "description": "Transaction result",
          "enum": [
            "approved",
            "canceled",
            "declined",
            "unknown"
          ],
          "readOnly": true,
          "type": "string"
        },
        "riskScore": {
          "description": "The transactions's risk score",
          "format": "integer",
          "readOnly": true,
          "type": "number"
        },
        "status": {
          "description": "Transaction status",
          "enum": [
            "completed",
            "connection-error",
            "never-sent",
            "pending",
            "sending",
            "suspended",
            "timeout",
            "waiting-capture",
            "waiting-refund"
          ],
          "readOnly": true,
          "type": "string"
        },
        "subscriptionIds": {
          "description": "The subscription IDs related to transaction",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true,
          "type": "array"
        },
        "type": {
          "description": "Transaction type",
          "enum": [
            "authorize",
            "capture",
            "credit",
            "refund",
            "sale",
            "void"
          ],
          "readOnly": true,
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Transaction updated time"
        },
        "velocity": {
          "description": "The number of transactions by the same customer in the past 24 hours",
          "format": "integer",
          "type": "number"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "Website's ID",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "TransactionGatewayLog": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/TransactionLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log entry created time"
        },
        "duration": {
          "description": "The request time, msec",
          "type": "integer"
        },
        "headers": {
          "description": "The request headers",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "request": {
          "description": "The request body",
          "type": "string"
        },
        "response": {
          "description": "The response body",
          "type": "string"
        },
        "url": {
          "description": "The request URL",
          "type": "string"
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "TransactionLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "transaction"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "TransactionRefund": {
      "properties": {
        "amount": {
          "description": "Refund amount",
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "amount"
      ],
      "type": "object"
    },
    "UPayCard": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "key": {
                  "description": "merchant key",
                  "format": "password",
                  "type": "string"
                },
                "receiver_account": {
                  "description": "merchant receiver account",
                  "type": "string"
                },
                "secret": {
                  "description": "merchant secret",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "receiver_account",
                "key",
                "secret"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "UPayCard Gateway config"
    },
    "USAePay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "pin": {
                  "description": "USAePay Gateway pin",
                  "format": "password",
                  "type": "string"
                },
                "sourceKey": {
                  "description": "USAePay Gateway source key",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "sourceKey",
                "pin"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "USAePay Gateway config"
    },
    "UpdatePassword": {
      "properties": {
        "currentPassword": {
          "description": "Current user's password - used when requesting password change",
          "format": "password",
          "type": "string"
        },
        "newPassword": {
          "description": "New user's password - used when requesting password change",
          "format": "password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "availableCurrencies": {
          "description": "An array of reporting currencies enabled for the merchant",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "country": {
          "description": "The user country setting - two letter code",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The user created time"
        },
        "email": {
          "description": "The user email",
          "format": "email",
          "maxLength": 100,
          "type": "string"
        },
        "firstName": {
          "description": "User's first name",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The user identifier string",
          "readOnly": true
        },
        "lastName": {
          "description": "User's last name",
          "type": "string"
        },
        "loginTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The user last login time"
        },
        "mobilePhone": {
          "description": "The user mobile phone number",
          "type": "string"
        },
        "password": {
          "description": "User's password. If not provided, password reset email will be sent",
          "format": "password",
          "type": "string"
        },
        "permissions": {
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ],
          "description": "The user's permissions. See the format in example"
        },
        "reportingCurrency": {
          "description": "The user's ISO Alpha-3 code used for reports",
          "type": "string"
        },
        "status": {
          "description": "The user status",
          "enum": [
            "active",
            "inactive",
            "pending-confirmation"
          ],
          "readOnly": true,
          "type": "string"
        },
        "totpRequired": {
          "description": "The user setting of two-factor authentification",
          "type": "boolean"
        },
        "totpSecret": {
          "description": "The user TOTP key for authentification app (if TOTP enabled)",
          "type": "string"
        },
        "totpUrl": {
          "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
          "format": "url",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The user updated time"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "UserPasswordAuthorization": {
      "properties": {
        "password": {
          "format": "password",
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ],
      "type": "object"
    },
    "UserPermissions": {
      "example": [
        {
          "methods": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "DELETE"
          ],
          "resourceName": "plans"
        },
        {
          "methods": [
            "GET",
            "HEAD"
          ],
          "resourceIds": [
            "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
            "1586f35x-4f6c-483z-a0a9-2c4y21f77a21"
          ],
          "resourceName": "invoices"
        },
        {}
      ],
      "items": {
        "properties": {
          "methods": {
            "items": {
              "enum": [
                "HEAD",
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ],
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "resourceIds": {
            "items": {
              "$ref": "#/definitions/ResourceId"
            },
            "type": "array"
          },
          "resourceName": {
            "enum": [
              "3dsecure",
              "api-keys",
              "api-tracking",
              "authentication-options",
              "authentication-tokens",
              "bank-accounts",
              "blacklists",
              "checkout-pages",
              "contacts",
              "coupons",
              "coupons-redemptions",
              "credentials",
              "custom-events",
              "custom-fields",
              "customers",
              "disputes",
              "events",
              "gateway-accounts",
              "invoices",
              "layouts",
              "lead-sources",
              "lists",
              "notes",
              "oct-batch",
              "organizations",
              "password-tokens",
              "payments",
              "payment-cards",
              "payment-cards-migrations",
              "paypal-accounts",
              "plans",
              "reports",
              "reset-sandbox",
              "rulesets",
              "sessions",
              "subscriptions",
              "subscription-tracking",
              "tokens",
              "transactions",
              "users",
              "webhook",
              "webhook-tracking",
              "websites"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "minItems": 1,
      "type": "array"
    },
    "VantivLitle": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantId": {
                  "description": "VantivLitle Gateway merchant ID",
                  "type": "string"
                },
                "password": {
                  "description": "VantivLitle Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "username": {
                  "description": "VantivLitle Gateway username",
                  "type": "string"
                }
              },
              "required": [
                "username",
                "password",
                "merchantId"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "VantivLitle Gateway config"
    },
    "Walpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantName": {
                  "description": "Walpay Gateway merchant name",
                  "type": "string"
                },
                "merchantPin": {
                  "description": "Walpay Gateway merchant pin",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantName",
                "merchantPin"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Walpay Gateway config"
    },
    "Webhook": {
      "properties": {
        "body": {
          "type": "string"
        },
        "credentialHash": {
          "description": "Webhook Credential identifier string.",
          "type": "string"
        },
        "headers": {
          "items": {
            "$ref": "#/definitions/WebhookHeader"
          },
          "type": "array"
        },
        "method": {
          "enum": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ],
          "type": "string"
        },
        "query": {
          "additionalProperties": {
            "example": {
              "param1": "value1",
              "param2": "value2"
            },
            "type": "string"
          },
          "description": "The URI parameters",
          "type": "object"
        },
        "url": {
          "format": "uri",
          "type": "string"
        }
      },
      "required": [
        "method",
        "url"
      ],
      "type": "object"
    },
    "WebhookAuthorization": {
      "discriminator": "type",
      "properties": {
        "type": {
          "default": "none",
          "description": "The authorization type",
          "enum": [
            "none",
            "basic",
            "digest",
            "oauth1"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "WebhookCredential": {
      "description": "Webhook credential",
      "properties": {
        "auth": {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        "hash": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "host": {
          "description": "The host name",
          "type": "string"
        }
      },
      "required": [
        "host"
      ],
      "type": "object"
    },
    "WebhookHeader": {
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/OnOff"
        },
        "value": {
          "example": {
            "Header1": "value1",
            "Header2": "value2;value3"
          },
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "Website": {
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            }
          ],
          "maxItems": 2,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "checkoutPageUri": {
          "description": "Your own custom URI for this Checkout Page",
          "type": "string"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Website created time"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "description": "The website identifier string",
          "readOnly": true
        },
        "name": {
          "description": "The website's name",
          "type": "string"
        },
        "serviceEmail": {
          "description": "The website's customer service email address",
          "format": "email",
          "type": "string"
        },
        "servicePhone": {
          "description": "The website's customer service phone number",
          "type": "string"
        },
        "updatedTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Website updated time"
        },
        "url": {
          "description": "The website's domain address",
          "type": "string"
        }
      },
      "required": [
        "name",
        "url",
        "servicePhone",
        "serviceEmail"
      ],
      "type": "object"
    },
    "WebsiteLink": {
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "enum": [
            "website"
          ],
          "type": "string"
        }
      },
      "required": [
        "rel"
      ],
      "type": "object"
    },
    "WebsiteWebhook": {
      "properties": {
        "webHookPassword": {
          "description": "Webhook HTTP Authentication Password. An empty string will be returned in the response",
          "type": "string"
        },
        "webHookUrl": {
          "description": "Webhook Url",
          "type": "string"
        },
        "webHookUsername": {
          "description": "Webhook HTTP Authentication Username",
          "type": "string"
        }
      },
      "required": [
        "webHookUrl",
        "webHookUsername",
        "webHookPassword"
      ],
      "type": "object"
    },
    "WebsiteWebhookTracking": {
      "description": "Webhook Tracking Requests.",
      "properties": {
        "_links": {
          "description": "The links related to resource",
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ],
          "maxItems": 1,
          "minItems": 1,
          "readOnly": true,
          "type": "array"
        },
        "createdTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "The log created time"
        },
        "eventName": {
          "description": "Event name for which webhook was called",
          "type": "string"
        },
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "nextSendTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Next send time"
        },
        "pushData": {
          "description": "Event's data information JSON-string",
          "type": "string"
        },
        "response": {
          "description": "HTTP code response",
          "type": "integer"
        },
        "sentTime": {
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ],
          "description": "Sent time"
        },
        "status": {
          "description": "Event's status",
          "enum": [
            "fail",
            "success"
          ],
          "type": "string"
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        }
      },
      "readOnly": true,
      "type": "object"
    },
    "Wirecard": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "businessCaseSignature": {
                  "description": "Wirecard Gateway merchant business case signature",
                  "format": "password",
                  "type": "string"
                },
                "delay": {
                  "description": "Wirecard Gateway delay",
                  "type": "integer"
                },
                "merchantPassword": {
                  "description": "Wirecard Gateway merchant password",
                  "format": "password",
                  "type": "string"
                },
                "merchantUsername": {
                  "description": "Wirecard Gateway merchant username",
                  "type": "string"
                }
              },
              "required": [
                "merchantUsername",
                "merchantPassword",
                "businessCaseSignature",
                "delay"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Wirecard Gateway config"
    },
    "Worldpay": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "merchantCode": {
                  "description": "Worldpay Gateway merchant code",
                  "format": "password",
                  "type": "string"
                },
                "merchantPassword": {
                  "description": "Worldpay Gateway merchant password",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "merchantCode",
                "merchantPassword"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "Worldpay Gateway config"
    },
    "ach": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "bankAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The bank account identifier string"
            },
            "gatewayAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment gateway identifier string"
            }
          },
          "required": [
            "bankAccountId"
          ],
          "type": "object"
        }
      ],
      "description": "ACH payment instrument object"
    },
    "and": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ],
      "description": "Logical AND",
      "type": "object"
    },
    "auto": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        }
      ],
      "description": "Rebilly will choose the best time to schedule the attempt"
    },
    "basic": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "properties": {
            "password": {
              "format": "password",
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [
            "username",
            "password"
          ],
          "type": "object"
        }
      ]
    },
    "between": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "properties": {
            "max": {
              "type": "string"
            },
            "min": {
              "type": "string"
            },
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "min",
            "max"
          ],
          "type": "object"
        }
      ],
      "description": "Between condition",
      "type": "object"
    },
    "blacklist": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "properties": {
            "ttl": {
              "default": 0,
              "description": "Blacklist TTL. Defaults to zero, meaning blacklist record won't expire ever.",
              "type": "integer"
            },
            "type": {
              "enum": [
                "customer-id",
                "email",
                "fingerprint",
                "ip-address",
                "payment-card-id"
              ],
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "type": "object"
        }
      ],
      "description": "Add customer data to blacklist"
    },
    "cancel-scheduled-payments": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ],
      "description": ""
    },
    "cash": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "receivedBy": {
              "description": "The receiver's name",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Cash payment instrument object"
    },
    "compare": {
      "properties": {
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "path",
        "value"
      ],
      "type": "object"
    },
    "cram-md5": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "date-interval": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        },
        {
          "properties": {
            "duration": {
              "minimum": 1,
              "type": "integer"
            },
            "unit": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "required": [
            "duration",
            "unit"
          ],
          "type": "object"
        }
      ]
    },
    "day-of-month": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        },
        {
          "properties": {
            "day": {
              "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n",
              "maximum": 31,
              "minimum": 1,
              "type": "integer"
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ],
          "type": "object"
        }
      ]
    },
    "day-of-week": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        },
        {
          "properties": {
            "day": {
              "$ref": "#/definitions/DayOfWeek"
            },
            "time": {
              "$ref": "#/definitions/Time"
            },
            "week": {
              "default": "next",
              "enum": [
                "next",
                "first-in-month",
                "last-in-month"
              ],
              "type": "string"
            }
          },
          "required": [
            "day"
          ],
          "type": "object"
        }
      ]
    },
    "digest": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "properties": {
            "password": {
              "format": "password",
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [
            "username",
            "password"
          ],
          "type": "object"
        }
      ]
    },
    "discount": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "properties": {
            "type": {
              "description": "The payment amount discount type",
              "enum": [
                "percent",
                "fixed"
              ],
              "type": "string"
            },
            "value": {
              "description": "The payment amount discount",
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "value",
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "discounts-per-redemption": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Restriction quantity",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "discounts-per-redemption restrictions"
    },
    "equals": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Equals condition",
      "type": "object"
    },
    "fixed": {
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "properties": {
            "amount": {
              "description": "Discount amount",
              "format": "double",
              "type": "number"
            },
            "currency": {
              "description": "Discount currency",
              "type": "string"
            }
          },
          "required": [
            "amount",
            "currency"
          ],
          "type": "object"
        }
      ],
      "description": "Coupon fixed amount discount"
    },
    "gateway-account-weights": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccountPickInstruction"
        },
        {
          "properties": {
            "weightedList": {
              "example": "[\n  {\"gatewayAccountId\": \"my_gateway_account_1\", \"weight\": 80},\n  {\"gatewayAccountId\": \"my_gateway_account_2\", \"weight\": 20}\n]\n",
              "items": {
                "properties": {
                  "gatewayAccountId": {
                    "$ref": "#/definitions/ResourceId"
                  },
                  "weight": {
                    "type": "integer"
                  }
                },
                "required": [
                  "gatewayAccountId",
                  "weight"
                ],
                "type": "object"
              },
              "minimum": 0,
              "type": "array",
              "uniqueItems": true
            }
          },
          "required": [
            "weightedList"
          ],
          "type": "object"
        }
      ]
    },
    "gateway-acquirer-weights": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccountPickInstruction"
        },
        {
          "properties": {
            "weightedList": {
              "example": "[\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"AIB\", \"weight\": 80},\n  {\"gatewayName\": \"RebillyProcessor\", \"acquirerName\": \"B+S\", \"weight\": 20}\n",
              "items": {
                "properties": {
                  "acquirerName": {
                    "$ref": "#/definitions/AcquirerName"
                  },
                  "gatewayName": {
                    "$ref": "#/definitions/GatewayName"
                  },
                  "weight": {
                    "type": "integer"
                  }
                },
                "required": [
                  "gatewayName",
                  "acquirerName",
                  "weight"
                ],
                "type": "object"
              },
              "minimum": 0,
              "type": "array",
              "uniqueItems": true
            }
          },
          "required": [
            "weightedList"
          ],
          "type": "object"
        }
      ]
    },
    "gt": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Greater than condition",
      "type": "object"
    },
    "gte": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Greater than or equals condition",
      "type": "object"
    },
    "guess-payment-card-expiration": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ],
      "description": ""
    },
    "iCheque": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "clientId": {
                  "description": "iCheque Gateway client ID",
                  "type": "string"
                },
                "secretWord": {
                  "description": "iCheque Gateway secret word",
                  "format": "password",
                  "type": "string"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "iCheque Gateway config"
    },
    "immediately": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        }
      ]
    },
    "in": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "properties": {
            "path": {
              "type": "string"
            },
            "values": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "path",
            "values"
          ],
          "type": "object"
        }
      ],
      "description": "In condition",
      "type": "object"
    },
    "logical": {
      "properties": {
        "conditions": {
          "items": {
            "$ref": "#/definitions/Condition"
          },
          "minItems": 2,
          "type": "array"
        }
      },
      "required": [
        "conditions"
      ],
      "type": "object"
    },
    "logical-not": {
      "example": {
        "condition": {
          "operation": "equals",
          "path": "/name",
          "value": "John Dou"
        },
        "operation": "not"
      },
      "properties": {
        "condition": {
          "$ref": "#/definitions/Condition"
        }
      },
      "required": [
        "condition"
      ],
      "type": "object"
    },
    "login": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "lt": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Less than condition",
      "type": "object"
    },
    "lte": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ],
      "description": "Less than or equals condition",
      "type": "object"
    },
    "minimum-order-amount": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "amount": {
              "description": "Minimum order quantity",
              "type": "integer"
            },
            "currency": {
              "description": "Minimum order currency",
              "type": "string"
            }
          },
          "required": [
            "amount",
            "currency"
          ],
          "type": "object"
        }
      ],
      "description": "minimum-order-amount restrictions"
    },
    "none": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/WebhookAuthorization"
        }
      ]
    },
    "not": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical-not"
        }
      ],
      "description": "Logical NOT",
      "type": "object"
    },
    "oauth1": {
      "allOf": [
        {
          "$ref": "#/definitions/WebhookAuthorization"
        },
        {
          "properties": {
            "consumerKey": {
              "type": "string"
            },
            "consumerSecret": {
              "type": "string"
            },
            "token": {
              "type": "string"
            },
            "tokenSecret": {
              "type": "string"
            }
          },
          "required": [
            "consumerKey",
            "consumerSecret",
            "token",
            "tokenSecret"
          ],
          "type": "object"
        }
      ]
    },
    "or": {
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ],
      "description": "Logical OR",
      "type": "object"
    },
    "partial": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "properties": {
            "type": {
              "description": "The payment amount type",
              "enum": [
                "percent",
                "fixed"
              ],
              "type": "string"
            },
            "value": {
              "description": "The payment amount",
              "format": "float",
              "type": "number"
            }
          },
          "required": [
            "value",
            "type"
          ],
          "type": "object"
        }
      ]
    },
    "payment-card": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "gatewayAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment gateway identifier string"
            },
            "paymentCardId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment card identifier string"
            }
          },
          "required": [
            "paymentCardId"
          ],
          "type": "object"
        }
      ],
      "description": "Payment card payment instrument object"
    },
    "paypal": {
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "properties": {
            "gatewayAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The payment gateway identifier string"
            },
            "payPalAccountId": {
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ],
              "description": "The PayPal account identifier string"
            }
          },
          "required": [
            "payPalAccountId"
          ],
          "type": "object"
        }
      ],
      "description": "PayPal payment instrument object"
    },
    "percent": {
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "properties": {
            "value": {
              "description": "Discount percent",
              "format": "double",
              "type": "number"
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        }
      ],
      "description": "Coupon percent discount"
    },
    "pick-gateway-account": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "properties": {
            "pickInstruction": {
              "$ref": "#/definitions/GatewayAccountPickInstruction"
            }
          },
          "required": [
            "pickInstruction"
          ],
          "type": "object"
        }
      ],
      "description": ""
    },
    "plain": {
      "allOf": [
        {
          "$ref": "#/definitions/SmtpAuthorization"
        },
        {
          "$ref": "#/definitions/UserPasswordAuthorization"
        }
      ]
    },
    "redemptions-per-customer": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Restriction value",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "Quantity per Customer restrictions"
    },
    "restrict-to-invoices": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "invoiceIds": {
              "description": "Invoice IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "invoiceIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-invoices restrictions"
    },
    "restrict-to-plans": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "planIds": {
              "description": "Plan IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "planIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-plans restrictions"
    },
    "restrict-to-subscriptions": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "subscriptionIds": {
              "description": "Subscription IDs coupon can be applied to",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "subscriptionIds"
          ],
          "type": "object"
        }
      ],
      "description": "restrict-to-subscriptions restrictions"
    },
    "schedule-payment": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "description": "The calculation instruction of scheduled time for payment",
          "properties": {
            "amountPolicy": {
              "enum": [
                "balance-outstanding",
                "invoice-total"
              ],
              "type": "string"
            },
            "scheduleInstruction": {
              "$ref": "#/definitions/ScheduleMethod"
            }
          },
          "required": [
            "scheduleInstruction",
            "amountPolicy"
          ],
          "type": "object"
        }
      ],
      "description": ""
    },
    "schedule-payment-retry": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/PaymentRetry"
        }
      ],
      "description": ""
    },
    "send-email": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/EmailNotification"
        }
      ],
      "description": ""
    },
    "stop-subscriptions": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        }
      ],
      "description": "Stop active subscriptions"
    },
    "total-redemptions": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericRestriction"
        },
        {
          "properties": {
            "quantity": {
              "description": "Total redemptions quantity",
              "type": "integer"
            }
          },
          "required": [
            "quantity"
          ],
          "type": "object"
        }
      ],
      "description": "total-redemptions restrictions"
    },
    "trigger-webhook": {
      "allOf": [
        {
          "$ref": "#/definitions/RuleAction"
        },
        {
          "$ref": "#/definitions/Webhook"
        }
      ],
      "description": ""
    },
    "vegaaH": {
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "properties": {
            "gatewayConfig": {
              "properties": {
                "password": {
                  "description": "vegaaH Gateway password",
                  "format": "password",
                  "type": "string"
                },
                "terminalId": {
                  "description": "vegaaH Gateway terminal ID",
                  "type": "string"
                }
              },
              "required": [
                "terminalId",
                "password"
              ],
              "type": "object"
            }
          },
          "required": [
            "gatewayConfig"
          ],
          "type": "object"
        }
      ],
      "description": "vegaaH Gateway config"
    }
  },
  "x-servers": [
    {
      "description": "Live Server",
      "url": "//api.rebilly.com/v2.1"
    },
    {
      "description": "Sandbox Server",
      "url": "//api-sandbox.rebilly.com/v2.1"
    }
  ]
}